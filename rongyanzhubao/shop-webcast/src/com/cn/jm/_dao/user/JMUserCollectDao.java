
package com.cn.jm._dao.user;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.cn._gen.dao.UserCollectDao;
import com.cn._gen.model.Goods;
import com.cn._gen.model.UserCollect;
import com.cn.jm._dao.goods.JMGoodsDao;
import com.cn.jm.core.db.JMToolSql;
import com.cn.jm.core.utils.util.JMResult;
import com.cn.jm.util.SqlUtil;
import com.jfinal.aop.Inject;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;


/**
 * Generated by 广州小跑robot.
 */
public class JMUserCollectDao extends UserCollectDao{
	@Inject
	public JMGoodsDao goodsDao;
	
	public JMResult adds(int userId,String goodsIds){
		String goodsIdStr[] = goodsIds.split(",");
		for(String s : goodsIdStr){
			int goodsId = Integer.valueOf(s);
			Goods goods = goodsDao.getById(goodsId);
			if(goods == null){
				continue ;
			}
			HashMap<String, Object> param = new HashMap<>();
			param.put("goodsId",goodsId);
			param.put("userId",userId);
			if(get(param,false) != null){//存在的不用收藏
				continue ;
			}
			UserCollect userCollect = new UserCollect();
			userCollect.setUserId(userId);
			userCollect.setGoodsImg(goods.getThumbnail());
			userCollect.setGoodsId(goodsId);
			userCollect.setGoodsName(goods.getName());
			userCollect.setPrice(goods.getPrice());
			userCollect.setOldprice(goods.getOldPrice());
			userCollect.setCreateTime(new Date());
			save(userCollect);
		}
		return JMResult.create().code(JMResult.SUCCESS).desc("收藏成功");
	}
	
	
	public JMResult dels(int userId,String collectIds){
		String goodsIdStr[] = collectIds.split(",");
		List<Integer> listIds = new ArrayList<>();
		for(String s : goodsIdStr){
			listIds.add(Integer.valueOf(s));
		}
		JMToolSql.deletes("shop_user_conllect", listIds);
		return JMResult.create().code(JMResult.SUCCESS).desc("删除收藏成功");
	}

	
	public JMResult addOrDel(int userId,int goodsId){
		Goods goods = goodsDao.getById(goodsId);
		if(goods == null){
			return JMResult.create().code(JMResult.FAIL).desc("该商品不存在");
		}
		HashMap<String, Object> param = new HashMap<>();
		param.put("goodsId",goodsId);
		param.put("userId",userId);
		UserCollect userCollect = get(param,false);
		if(userCollect != null){//存在的不用收藏
			delete(userCollect);
			return JMResult.create().code(JMResult.SUCCESS).desc("取消收藏成功");
		}
		UserCollect userCollect2 = new UserCollect();
		userCollect2.setUserId(userId);
		userCollect2.setGoodsImg(goods.getThumbnail());
		userCollect2.setGoodsId(goodsId);
		userCollect2.setGoodsName(goods.getName());
		userCollect2.setPrice(goods.getPrice());
		userCollect2.setOldprice(goods.getOldPrice());
		userCollect2.setCreateTime(new Date());
		save(userCollect2);
		return JMResult.create().code(JMResult.SUCCESS).desc("添加收藏成功");
	}
	
	
	public Page<UserCollect> pageForApi(String keyword, int userId, Integer sellState, int pageSize, int pageNumber){
		StringBuilder fromSql = new StringBuilder(" FROM shop_user_collect suc INNER JOIN shop_goods sg ON sg.id = suc.goodsId");
		SqlUtil.addWhere(fromSql, " AND suc.userId =", userId);
		SqlUtil.addLike(fromSql, " AND suc.goodsName ", "%", keyword, "%");
		SqlUtil.addWhere(fromSql, " AND sg.sellState = ", sellState);
		fromSql.append(" ORDER BY sg.sellState DESC,suc.id DESC");
		return dao.paginate(pageNumber, pageSize, "SELECT suc.*,IFNULL(sg.price,suc.price) price,sg.sellState", fromSql.toString());
	}
	
	/**
	 * 
	 * @date 2019年1月26日 上午9:31:38
	 * @author JaysonLee
	 * @Description: 是否收藏此商品
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param userId
	 * @param goodsId
	 * @return
	 *
	 */
	public boolean isCollected(Integer userId,int goodsId){
		if(userId == null)
			return false ;
		HashMap<String, Object> param = new HashMap<>();
		param.put("userId",userId);
		param.put("goodsId",goodsId);
		return get(param,false) != null ;
	}
	
	public Integer collectNum(int goodsId) {
		return get("SELECT IFNULL(COUNT(*),0) num FROM shop_user_collect WHERE goodsId = " + goodsId, true).getInt("num");
	}


	public Object deleteInvalidGoods(Integer accountId) {
		return Db.update("DELETE suc FROM shop_user_collect suc INNER JOIN shop_goods sg ON sg.id = suc.goodsId WHERE sg.sellState = 0 AND suc.userId = " + accountId);
	}
	
}
