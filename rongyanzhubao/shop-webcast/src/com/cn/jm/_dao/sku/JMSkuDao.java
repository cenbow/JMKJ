package com.cn.jm._dao.sku;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;

import com.cn._gen.dao.SkuDao;
import com.cn._gen.model.Sku;
import com.cn._gen.model.SkuAttr;
import com.cn._gen.model.Spec;
import com.cn._gen.model.SpecAttribute;
import com.cn._gen.model.SpecGroup;
import com.cn.jm._dao.spec.JMSpecAttributeDao;
import com.cn.jm._dao.spec.JMSpecDao;
import com.cn.jm._dao.spec.JMSpecGroupDao;
import com.cn.jm.core.common.JMCommonDao;
import com.cn.jm.core.common.Query;
import com.cn.jm.core.constants.JMConstants;
import com.jfinal.aop.Inject;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;

/**
 * Generated by 广州小跑robot.
 */
public class JMSkuDao extends SkuDao {
	@Inject
	public JMSpecDao specDao;
	@Inject
	public JMSpecAttributeDao specAttributeDao;
	@Inject
	public JMSkuAttrDao skuAttrDao;
	@Inject
	public JMSpecGroupDao specGroupDao;

	/**
	 * 当前商品可用sku列表
	 * 
	 * @param goodsId
	 * @return
	 */
	public List<Spec> listByGoodsId(int goodsId) {
		List<Spec> specs = specDao.listspecByGoods(goodsId);
		for (Spec spec : specs) {
			spec.put("attrs", specAttributeDao.listspecByGoodsAndSpecId(goodsId, spec.getId()));
		}
		return specs;
	}

	public List<Sku> listSKuByGoodsId(int goodsId) {
		HashMap<String, Object> andpm = new HashMap<>();
		andpm.put("goodsId", goodsId);
		List<Sku> list = list("*", andpm, "id", "DESC", true);
		return list;
	}

	public Sku getByIdAndGoodsId(int goodsId, int id) {
		HashMap<String, Object> andpm = new HashMap<>();
		andpm.put("goodsId", goodsId);
		andpm.put("id", id);
		return get(andpm, false);
	}

	/**
	 * 
	 * @date 2019年1月26日 下午4:39:07
	 * @author JaysonLee
	 * @Description: 保存商品规格sku
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param goodsId
	 * @param attrDatas
	 * @return
	 *
	 */
	public boolean add(int goodsId, List<HashMap<String, Object>> attrDatas) {
		try {
			return Db.tx(new IAtom() {
				@Override
				public boolean run() throws SQLException {

					// Db.update("delete a,b from shop_sku a right join shop_sku_attr b on a.id =
					// b.skuId where a.goodsId = ?",goodsId);
					// Db.update("delete from shop_spec_group where goodsId = ?",goodsId);

					for (HashMap<String, Object> map : attrDatas) {
						// BigDecimal price = new BigDecimal((String)map.get("price"));
						// BigDecimal oldPrice = new BigDecimal((String)map.get("oldprice"));
						// int stock = (int)map.get("stock");
						// String img = (String)map.get("img");
						String attrids = (String) map.get("attrids");
						String name = (String) map.get("name");
						Sku sku = new Sku();
						sku.setGoodsId(goodsId);
						// sku.setPrice(price);
						// sku.setOldPrice(oldPrice);
						// sku.setImage(img);
						// sku.setStock(stock);
						sku.setName(name);
						boolean b = save(sku);// 保存sku
						if (b) {
							String attrs[] = attrids.split(",");
							String skuCode = "";
							for (String attr : attrs) {
								int attrId = Integer.valueOf(attr);
								
								
								SkuAttr skuAttr = new SkuAttr();
								skuAttr.setSkuId(sku.getId());
								skuAttr.setAttrId(attrId);
								b = skuAttrDao.save(skuAttr);// 保存属性关联表

								SpecAttribute specAttribute = specAttributeDao.getById(attrId, false);
								if (specAttribute == null) {
									return false;
								}
								HashMap<String, Object> param = new HashMap<>();
								param.put("goodsId", goodsId);
								param.put("specId", specAttribute.getSpecId());
								param.put("specAttrId", attrId);
								if (specGroupDao.get(param, false) == null) {
									SpecGroup specGroup = new SpecGroup();
									specGroup.setSpecId(specAttribute.getSpecId());
									specGroup.setGoodsId(goodsId);
									specGroup.setSpecAttrId(attrId);
									b = b && specGroupDao.save(specGroup);// 保存规格商品关联
								}
								if (!b)
									return false;
								skuCode += specAttribute.getName() + ",";
							}

							if (skuCode.endsWith(",")) {
								skuCode = skuCode.substring(0, skuCode.length() - 1);
							}
							sku.setSkuCode(skuCode);
							b = b && update(sku);
							if (!b)
								return false;
						} else {
							return false;
						}
					}
					return true;
				}
			});
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * 
	 * @date 2019年1月29日 下午3:16:35
	 * @author JaysonLee
	 * @Description: 同步更新sku里面的skuCode
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param attrId
	 * @param oldAttr
	 * @param attr
	 *
	 */
	public void updateSkuCode(int attrId, String oldAttr, String attr) {
		List<Sku> skuList = Sku.dao.find(
				"select * from shop_sku where id in (select skuId from shop_sku_attr where attrId = ? group by skuId)",
				attrId);
		for (Sku sku : skuList) {
			sku.setSkuCode(sku.getSkuCode().replace(oldAttr, attr));
			update(sku);
		}
	}

	/**
	 * 
	 * @date 2019年1月29日 下午5:54:10
	 * @author JaysonLee
	 * @Description: 删除sku
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param attrId
	 *
	 */
	public void delByAttrId(int attrId) {
		Db.update("delete from shop_sku where id in (select skuId from shop_sku_attr where attrId = ?)", attrId);
		Db.update("delete from shop_sku_attr where attrId = ?", attrId);
	}

	/**
	 * 
	 * @date 2019年6月19日 上午10:18:24
	 * @author JaysonLee
	 * @Description: 查询skulist
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param skuIds
	 * @param accountId
	 * @return
	 *
	 */
	public List<Sku> selectByIds(String skuIds) {
		Query query = new Query();
		query.put("s.state= ", JMConstants.NORMAL);
		query.put("and g.state= ", JMConstants.NORMAL);
		query.putIn(" and s.id", skuIds, true);

		StringBuilder preSql = new StringBuilder("select s.*,g.name,g.remark,g.templateId,t.type as templateType");
		return JMCommonDao.jmd.selectList(Sku.class, query, preSql.toString(),
				"s inner join shop_goods g on s.goodsId = g.id "
						+ "inner join tb_freight_template t on g.templateId = t.id");

	}

	public List<Sku> listSkuDetail(Integer goodsId) {
		return dao.find("SELECT " + " ss.id,ssa.id attrsId,ssa.name skuCode,ssku.name,ssku.id skuId " 
				+ "FROM shop_spec ss " 
				+ "INNER JOIN shop_spec_attribute ssa ON ssa.specId = ss.id "
				+ "LEFT JOIN shop_sku_attr skua ON skua.attrId = ssa.id "
				+ "LEFT JOIN shop_sku ssku ON ssku.id = skua.skuId "
				+ "WHERE skua.id IS NULL OR ssku.goodsId = " + goodsId);
	}

}
