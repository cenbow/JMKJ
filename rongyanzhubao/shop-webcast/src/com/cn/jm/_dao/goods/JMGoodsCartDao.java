
package com.cn.jm._dao.goods;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.cn._gen.dao.GoodsCartDao;
import com.cn._gen.model.Goods;
import com.cn._gen.model.GoodsCart;
import com.cn._gen.model.Sku;
import com.cn.jm._dao.sku.JMSkuDao;
import com.cn.jm.core.db.JMToolSql;
import com.cn.jm.core.utils.util.JMResult;
import com.jfinal.aop.Inject;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;


/**
 * Generated by 广州小跑robot.
 */
public class JMGoodsCartDao extends GoodsCartDao{
	@Inject
	JMGoodsDao goodsDao ;
	@Inject
	JMSkuDao skuDao ;
	
	public JMResult add(int userId,int goodsId,int num,int skuId){
		Goods goods = goodsDao.getById(goodsId);
		if(goods == null){
			return JMResult.create().code(JMResult.FAIL).desc("非法操作/商品不存在");
		}
		Sku sku = skuDao.getById(skuId);
		if(sku == null || !sku.getGoodsId().equals(goodsId)){
			return JMResult.create().code(JMResult.FAIL).desc("非法操作/商品规格不存在");
		}
		if(sumCartsNum(userId) >= 100){
			return JMResult.create().code(JMResult.FAIL).desc("购物车已经装不下了");
		}
		HashMap<String, Object> param = new HashMap<>();
		param.put("userId", userId);
		param.put("goodsId", goodsId);
		param.put("skuId", skuId);
		GoodsCart goodsCart = get(param, false);
		boolean b = false ;
		if(goodsCart == null){
			goodsCart = new GoodsCart();
			goodsCart.setUserId(userId);
			goodsCart.setGoodsId(goodsId);
			goodsCart.setNum(num);
			goodsCart.setSkuId(skuId);
			goodsCart.setPrice(sku.getPrice());
			goodsCart.setName(goods.getName());
			goodsCart.setImage(sku.getImage());
			goodsCart.setCreateTime(new Date());
			
			b = save(goodsCart);
		}else{
			goodsCart.setNum(goodsCart.getNum() + num);
			b = update(goodsCart);
		}
		if(b)
			return JMResult.create().code(JMResult.SUCCESS).desc("添加购物车成功");
		else return JMResult.create().code(JMResult.FAIL).desc("添加购物车失败");
	}

	
	public JMResult del(int userId,String cartIds){
		String ids[] = cartIds.split(",");
		List<Integer> listids = new ArrayList<>();
		for(String s : ids){
			listids.add(Integer.valueOf(s));
		}
		if(JMToolSql.deletes("shop_goods_cart", listids)){
			return JMResult.create().code(JMResult.SUCCESS).desc("删除购物车成功");
		}else{
			return JMResult.create().code(JMResult.FAIL).desc("删除购物车失败");
		}
	}
	
	
	public JMResult edit(int userId,int cartId,int num,Integer skuId){
		GoodsCart goodsCart = getByIdAndUserId(cartId, userId);
		if(goodsCart == null){
			return JMResult.create().code(JMResult.FAIL).desc("非法操作/购物车不存在");
		}
		Goods goods = goodsDao.getById(goodsCart.getGoodsId());
		if(goods == null){
			return JMResult.create().code(JMResult.FAIL).desc("非法操作/商品不存在");
		}
		if(skuId != null){
			Sku sku = skuDao.getById(skuId);
			if(sku == null || !sku.getGoodsId().equals(goods.getId())){
				return JMResult.create().code(JMResult.FAIL).desc("非法操作/商品规格不存在");
			}
			goodsCart.setPrice(sku.getPrice());
			goodsCart.setSkuId(skuId);
			goodsCart.setImage(sku.getImage());
		}
		goodsCart.setNum(num);
		if(update(goodsCart)){
			return JMResult.create().code(JMResult.SUCCESS).desc("修改购物车成功");
		}
		return JMResult.create().code(JMResult.FAIL).desc("修改购物车失败");
	}
	
	
	public GoodsCart getByIdAndUserId(int id ,int userId){
		HashMap<String, Object> param = new HashMap<>();
		param.put("userId", userId);
		param.put("id",id);
		return get(param,false);
	}
	
	public Page<GoodsCart> pageForApi(int pageSize,int pageNumber,int accountId){
		HashMap<String, Object> param = new HashMap<>();
		param.put("userId", accountId);
		Page<GoodsCart> page = page(pageNumber, pageSize, "*", param, "id", "DESC", true);
		for(GoodsCart goodsCart : page.getList()){
			goodsCart.put("skuList",skuDao.listSKuByGoodsId(goodsCart.getGoodsId()));
			goodsCart.put("specList",skuDao.listByGoodsId(goodsCart.getGoodsId()));
		}
		return page ;
	}
	
	public List<GoodsCart> listForApi(int accountId){
		HashMap<String, Object> param = new HashMap<>();
		param.put("userId", accountId);
		List<GoodsCart> list = list("",param,"id","DESC",false);
		for(GoodsCart goodsCart : list){
			Sku sku = skuDao.getById(goodsCart.getSkuId(),false);
			String skuCode = "";
			if(sku == null){
				skuCode = "该商品已失效";
			}else{
				skuCode = sku.getSkuCode();
				goodsCart.put("image",sku.getImage());
			}
			goodsCart.put("skuList",skuDao.listSKuByGoodsId(goodsCart.getGoodsId()));
			goodsCart.put("specList",skuDao.listByGoodsId(goodsCart.getGoodsId()));
			goodsCart.put("skuCode",skuCode);
			
		}
		return list ;
	}
	
	
	public int sumCartsNum(int userId){
		Number number = Db.queryNumber("select count(*) from shop_goods_cart where userId = ?",userId);
		return number != null ? number.intValue() : 0 ;
	}
}
