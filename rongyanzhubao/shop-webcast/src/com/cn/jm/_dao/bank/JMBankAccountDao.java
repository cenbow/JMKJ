
package com.cn.jm._dao.bank;

import java.util.Date;
import java.util.HashMap;

import com.cn._gen.dao.BankAccountDao;
import com.cn._gen.model.BankAccount;
import com.cn.jm.core.db.JMToolSql;
import com.cn.jm.core.utils.util.JMResult;
import com.jfinal.plugin.activerecord.Page;
import com.sun.org.apache.regexp.internal.recompile;


/**
 * Generated by 广州小跑robot.
 */
public class JMBankAccountDao extends BankAccountDao{
	
	public static final int state_unChoice = 0;//未选
	public static final int state_state = 1;//已选
	
	public JMResult save(int accountId,String bankNick,String bankName,String bankAddress,String bankAccount) {
		BankAccount ba = new BankAccount();
		ba.setAccountId(accountId);
		ba.setBankNick(bankNick);
		ba.setBankName(bankName);
		ba.setBankAddress(bankAddress);
		ba.setBankAccount(bankAccount);
		ba.setCreateTime(new Date());
		
		HashMap<String, Object> param = new HashMap<>();
		param.put("accountId", accountId);
		param.put("state", state_state);
		BankAccount mBankAccount = get(param, true);
		if (mBankAccount == null) {
			ba.setState(state_state);
		}else {
			ba.setState(state_unChoice);
		}
		
		boolean result = save(ba);
		if (result) {
			return JMResult.create().success("新增成功");
		}else {
			return JMResult.create().fail("新增失败");
		}
	}
	
	/**
	 * 更改默认选择
	 * @param accountId
	 * @param bankAccountId
	 * @return
	 */
	public JMResult choice(int accountId,int bankAccountId) {
		BankAccount bankAccount = getById(bankAccountId);
		if (null == bankAccount || bankAccount.getAccountId() != accountId) {
			return JMResult.create().fail("非法操作,地址不存在或不属于你");
		}
		HashMap<String, Object> param = new HashMap<>();
		param.put("accountId", accountId);
		param.put("state", state_state);
		BankAccount mBankAccount = get(param, true);
		boolean result = true;
		if (mBankAccount != null) {
			mBankAccount.setState(state_unChoice);
			result = update(mBankAccount);
		}
		if (result) {
			bankAccount.setState(state_state);
			result = update(bankAccount);
		}
		if (result) {
			return JMResult.create().success("修改成功");
		}else {
			return JMResult.create().fail("修改失败");
		}
	}
	
	/**
	 * 用户的银行卡信息
	 * @param pageNumber
	 * @param pageSize
	 * @param accountId
	 * @return
	 */
	public Page<BankAccount> page(int pageNumber, int pageSize,int accountId){
		String format = " FROM shop_bank_account WHERE accountId = %s ORDER BY id DESC";
		String from = JMToolSql.format(format, accountId);
		return page(pageNumber, pageSize, "", from, true);
	}
	
	/**
	 * 获取默认选择银行卡
	 * @param accountId
	 * @return
	 */
	public BankAccount  getChoice(int accountId) {
		HashMap<String, Object> param = new HashMap<>();
		param.put("accountId", accountId);
		param.put("state", state_state);
		return get(param, true);
	}
	

}
