
package com.cn.jm.controller.shop.system;

import java.util.Date;
import java.util.HashMap;

import com.cn._gen.model.Marketing;
import com.cn.jm._dao.marketing.JMMarketingDao;
import com.cn.jm._dao.marketing.JMMarketingGoodsDao;
import com.cn.jm.core.JMConsts;
import com.cn.jm.core.tool.JMToolString;
import com.cn.jm.core.utils.util.JMResult;
import com.cn.jm.core.utils.util.JMUploadKit;
import com.cn.jm.core.web.controller.JMBaseSystemController;
import com.cn.jm.core.web.dao.JMBaseDao;
import com.cn.jm.interceptor.SystemLoginInterceptor;
import com.cn.jm.web.core.router.JMRouterMapping;
import com.jfinal.aop.Before;
import com.jfinal.aop.Inject;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by 广州小跑robot.
 */
@JMRouterMapping(url = SystemMarketingController.url)
@Before(value={SystemLoginInterceptor.class})
public class SystemMarketingController extends JMBaseSystemController {
	
	public static final String path = JMConsts.base_view_url+"/system/shop/marketing";
	public static final String url ="/system/shop/marketing";
	
	@Inject
	public JMMarketingDao marketingDao;
	@Inject
	public JMMarketingGoodsDao marketingGoodsDao ;

	
	public void index(){
		page();
	}
	
	public void page(){
		String keyword = getPara("keyword","");
		Integer id = getParaToInt("id");
		
		String startTime = getPara("startTime","");
		String endTime = getPara("endTime","");
		
		Integer pageNumber = getParaToInt(0, 1);
		Integer pageSize = JMConsts.pageSize;
		
		HashMap<String, Object> andpm = new HashMap<String, Object>();
		HashMap<String, Object> likepm = new HashMap<String, Object>();
		HashMap<String, Object> orpm = new HashMap<String, Object>();
		
		if (JMToolString.isNotEmpty(keyword)) {
			likepm.put("name", keyword);
		}
		if (id != null) {
			andpm.put("id", id);
		}
		Page<Marketing> page = null;
		
		if (JMToolString.isNotEmpty(startTime) && JMToolString.isNotEmpty(endTime)) {
			page = marketingDao.page(pageNumber, pageSize, "", andpm, orpm, likepm, startTime,endTime,"id", JMBaseDao.DESC, false);
		}else {
			page = marketingDao.page(pageNumber, pageSize, "", andpm, orpm, likepm, "id", JMBaseDao.DESC, false);
		}
		
		setAttr("id", id);
		setAttr("keyword", keyword);
		setAttr("startTime", startTime);
		setAttr("endTime", endTime);
		setAttr("page", page);
		
		jump();
		render(path+"/page.html");
	}
	
	public void add(){
		setToken();
		
		setAttr("action", JMConsts.ACTION_ADD);
		setAttr("marketing", new Marketing());
		render(path+"/add.html");
	}
	
	public void save(){
		String image = JMUploadKit.fileUpload(this,"image","marketing");
		Marketing marketing = getModel(Marketing.class);
		marketing.setCreateTime(new Date());
		if(image != null)
			marketing.setImage(image);
		boolean result = marketingDao.save(marketing);
		if(result){
			JMResult.success(this, "添加成功");
		}else{
			JMResult.fail(this, "添加失败");
		}
	}
	
	public void edit(){
		setToken();
		int id = getParaToInt("id");
		
		setAttr("marketing", marketingDao.getById(id,false));
		render(path+"/edit.html");
	}
	
	public void update(){
		String image = JMUploadKit.fileUpload(this,"image","marketing");
		Marketing marketing = getModel(Marketing.class);
		if(image != null)
			marketing.setImage(image);
		boolean result = marketingDao.update(marketing);
		if(result){
			JMResult.success(this, "编辑成功");
		}else{
			JMResult.fail(this, "编辑失败");
		}
	}
	
	public void delete(){
		int id = getParaToInt("id");
		
		if (marketingDao.deleteById(id)) {
			JMResult.success(this, "删除成功");
		}else {
			JMResult.fail(this, "删除失败");
		}
	}
	
	public void dels(){
		Integer[] ids = getParaValuesToInt("ids");
		if(ids != null){
			boolean result = marketingDao.deleteByIds(ids);
			if (result) {
				JMResult.success(this, "删除成功");
			}else {
				JMResult.fail(this, "删除失败");
			}
		}else {
			JMResult.fail(this, "请选择需要删除的数据");
		}
	}
	
	public void addGoods() {
		Integer[] goodsIds = getParaValuesToInt("goodsIds");
		int marketingId = getParaToInt("marketingId");
		if(marketingGoodsDao.add(goodsIds, marketingId)) {
			JMResult.success(this, "添加成功");
		}else {
			JMResult.fail(this, "添加失败");
		}
	}
	
	public void toSelectGoods() {
		int marktetingId = getParaToInt("marketingId",1);
		String keyword = getPara("keyword","");
		setAttr("marketingId",marktetingId);
		setAttr("selectedList", marketingGoodsDao.listByMarketId(marktetingId, keyword));
		render(path + "/goodsList.html");
	}
	
}