
package com.cn.jm.service;

import com.jfinal.aop.Inject;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.io.File;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import com.cn.jm._dao.account.JMAccountUserDao;
import com.cn._gen.model.Account;
import com.cn._gen.model.AccountUser;
import com.cn._gen.model.ExtractLog;
import com.cn.jm._dao.balance.ExtractEnum;
import com.cn.jm._dao.balance.JMBalanceRecordDao;
import com.cn.jm._dao.configure.ConfigureEnum;
import com.cn.jm._dao.extractlog.JMExtractLogDao;
import com.cn.jm.core.utils.util.BigDecimalUtil;
import com.cn.jm.core.utils.util.JMResult;
import com.cn.jm.core.utils.util.NoUtils;
import com.cn.jm.util.ExportExcelUtil;
import com.cn.jm.util.JMResultUtil;
/**
 * Generated by 小跑科技robot  .
 */
public class JMExtractLogService extends BasicsService<ExtractLog> {
	
	@Inject
	JMExtractLogDao extractlogDao;
	
	@Inject
	JMBalanceRecordDao jmBalanceRecordDao;
	
	@Inject
	JMAccountUserDao jmAccountUserDao;
	
	@Inject
	JMAccountUserService jmAccountUserService;
	
	@Inject
	JMConfigService jmConfigService;
	
//	public Page<ExtractLog> page(Integer pageNumber, Integer pageSize,Integer id,String keyword,String startTime,String endTime){
//		return extractlogDao.page(pageNumber,pageSize,id,keyword,startTime,endTime,false);
//	}
	
	public JMResult create(Account account, String amount, String bankName, String bankBranch, String bankUser, String bankNumber) {
		Date now = new Date();
		BigDecimal amountBigDecimal = new BigDecimal(amount);
		if(!BigDecimalUtil.isBig(amountBigDecimal, BigDecimal.ZERO)) {
			return JMResultUtil.failDesc("非法提现数额!");
		}
		BigDecimal negative = new BigDecimal(-1);
		BigDecimal feeProportion = new BigDecimal(jmConfigService.getByName(ConfigureEnum.EXTRACT_FEE.getName()).getValue());//提现手续费比例
		BigDecimal fee = amountBigDecimal.multiply(feeProportion.divide(new BigDecimal(100)));//手续费
		BigDecimal extractAmount = amountBigDecimal.add(fee);//提现总额
		AccountUser accountUser = jmAccountUserService.selectByAccountId(account.getId());
		if(BigDecimalUtil.isSmall(accountUser.getAmount(), extractAmount)) {
			return JMResultUtil.failDesc("余额不足");
		}
		ExtractLog extractLog = new ExtractLog();
		extractLog.setNo(NoUtils.createOutTradeNo("ETX"));
		extractLog.setAccountId(account.getId());
		extractLog.setAmount(amountBigDecimal);
		extractLog.setFee(fee);
		extractLog.setBankName(bankName);
		extractLog.setBankBranch(bankBranch);
		extractLog.setBankUser(bankUser);
		extractLog.setBankNumber(bankNumber);
		extractLog.setCreateTime(now);
		boolean b = Db.tx(()->{
			if(!save(extractLog)) {
				return false;
			}
			return jmAccountUserDao.changeBalance(account.getId(), extractAmount.multiply(negative))
					&& jmBalanceRecordDao.saveRecord(account.getId(), account.getId(), extractLog.getId(),
							ExtractEnum.TYPE_OUT, ExtractEnum.MSG_TYPE_EXTRACT, "提现", extractAmount.multiply(negative));
		});
		return b ? JMResultUtil.success() : JMResultUtil.failDesc("申请失败,请稍后重试"); 
	}
	
	/**
	 * 同意提现
	 */
	public boolean agree(Integer extractLogId) {
		ExtractLog extractLog = selectById(extractLogId);
		if(extractLog == null || !extractLog.getState().equals(ExtractEnum.EXTRACT_STATE_EXAMINING.getValue())) {
			return false;
		}
		extractLog.setState(ExtractEnum.EXTRACE_STATE_AGREE.getValue());
		extractLog.setExamineTime(new Date());
		return update(extractLog);
	}
	
	/**
	 * 批量同意
	 */
	public boolean batchAgree(List<Integer> extractLogIds) {
		List<ExtractLog> extractLogs = new ArrayList<>();
		Date now = new Date();
		for (Integer integer : extractLogIds) {
			ExtractLog extractLog = selectById(integer);
			if(extractLog == null || !extractLog.getState().equals(ExtractEnum.EXTRACT_STATE_EXAMINING.getValue())) {
				return false;
			}
			extractLog.setState(ExtractEnum.EXTRACE_STATE_AGREE.getValue());
			extractLog.setExamineTime(now);
			extractLog.setUpdateTime(now);
			extractLogs.add(extractLog);
		}
		return extractlogDao.updates(extractLogs);
	}
	
	/**
	 * 拒绝提现
	 */
	public boolean refuse(Integer extractLogId, String reason) {
		ExtractLog extractLog = selectById(extractLogId);
		if(extractLog == null || !extractLog.getState().equals(ExtractEnum.EXTRACT_STATE_EXAMINING.getValue())) {
			return false;
		}
		extractLog.setState(ExtractEnum.EXTRACE_STATE_REFUSE.getValue());
		extractLog.setReason(reason);
		extractLog.setExamineTime(new Date());
		return Db.tx(()->{
			return extractLog.update() && jmAccountUserDao.changeBalance(extractLog.getAccountId(), extractLog.getAmount().add(extractLog.getFee()))
					&& jmBalanceRecordDao.saveRecord(extractLog.getAccountId(), extractLog.getAccountId(), extractLog.getId(),
							ExtractEnum.TYPE_IN, ExtractEnum.MSG_TYPE_EXTRACTFAIL, "提现失败", extractLog.getAmount().add(extractLog.getFee()));
		});
	}
	
	public Page<ExtractLog> pageSys(Integer pageNumber, Integer pageSize, String mobile, String nick, Integer state,
			String applyStartTime, String applyEndTime, String examineStartTime, String examineEndTime, boolean isCache){
		return extractlogDao.page(pageNumber, pageSize, mobile, nick, state, applyStartTime,
				applyEndTime, examineStartTime, examineEndTime, isCache);
	}
	
	/**
	 * 导出excel
	 */
	public File export( String mobile, String nick, Integer state, String applyStartTime,
			String applyEndTime, String examineStartTime, String examineEndTime, boolean isCache){
		List<ExtractLog> list = extractlogDao.list(mobile, nick, state, applyStartTime,
				applyEndTime, examineStartTime, examineEndTime, isCache);
		String[] header = {"手机号", "昵称", "持卡人", "银行名称", "开户行", "银行卡号", "提现金额", "手续费", "状态(0待审核1通过2未通过)", "申请时间", "审核时间"};
		String[] attrList = {"mobile", "nick", "bankUser", "bankName", "bankBranch", "bankNumber",
				"amount", "fee", "state", "createTime", "examineTime"};
		return ExportExcelUtil.exportFile(list, "提现列表", header, Arrays.asList(attrList));
	}
}