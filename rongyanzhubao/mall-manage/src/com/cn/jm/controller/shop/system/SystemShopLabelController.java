
package com.cn.jm.controller.shop.system;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.cn._gen.model.Label;
import com.cn.jm._dao.label.JMLabelDao;
import com.cn.jm.core.JMConsts;
import com.cn.jm.core.tool.JMToolString;
import com.cn.jm.core.utils.util.JMResult;
import com.cn.jm.core.web.controller.JMBaseSystemController;
import com.cn.jm.core.web.dao.JMBaseDao;
import com.cn.jm.interceptor.SystemLoginInterceptor;
import com.cn.jm.util.UploadUtil;
import com.cn.jm.web.core.router.JMRouterMapping;
import com.jfinal.aop.Before;
import com.jfinal.aop.Inject;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by 广州小跑robot.
 */
@JMRouterMapping(url = SystemShopLabelController.url)
@Before(value={SystemLoginInterceptor.class})
public class SystemShopLabelController extends JMBaseSystemController {
	
	public static final String path = JMConsts.base_view_url+"/system/shop/label";
	public static final String url ="/system/shop/label";
	
	@Inject
	public JMLabelDao labelDao;

	public void index(){
		page();
	}

	public void page(){
		String keyword = getPara("keyword","");
		Integer id = getParaToInt("id");
		Integer parent = getParaToInt("parent");
		
		String startTime = getPara("startTime","");
		String endTime = getPara("endTime","");
		
		Integer pageNumber = getParaToInt(0, 1);
		Integer pageSize = JMConsts.pageSize;
		
		HashMap<String, Object> andpm = new HashMap<String, Object>();
		HashMap<String, Object> likepm = new HashMap<String, Object>();
		HashMap<String, Object> orpm = new HashMap<String, Object>();
		
		if (JMToolString.isNotEmpty(keyword)) {
			likepm.put("name", keyword);
		}
		if (id != null) {
			andpm.put("id", id);
		}
		if (parent != null) {
			andpm.put("parent", parent);
		}else {
			andpm.put("series", 0);
		}
		
		andpm.put("type", JMLabelDao.TYPE_SHOP);
		
		Page<Label> page = null;
		
		if (JMToolString.isNotEmpty(startTime) && JMToolString.isNotEmpty(endTime)) {
			page = labelDao.page(pageNumber, pageSize, "", andpm, orpm, likepm, startTime,endTime,"id", JMBaseDao.DESC, true);
		}else {
			page = labelDao.page(pageNumber, pageSize, "", andpm, orpm, likepm, "id", JMBaseDao.DESC, true);
		}
		
		setAttr("id", id);
		setAttr("keyword", keyword);
		setAttr("startTime", startTime);
		setAttr("endTime", endTime);
		setAttr("page", page);
		
		setAttr("page", page);
		jump();
		render(path+"/page.html");
	}
	
	public void add(){
		setToken();
		
		List<Label> labelList = labelDao.all(JMLabelDao.TYPE_SHOP);
		
		setAttr("labelList", labelList);
		setAttr("action", JMConsts.ACTION_ADD);
		setAttr("label", new Label());
		render(path+"/add.html");
	}
	
	public void save(){
		String image = UploadUtil.uploadImg(this, "image", "/label");
		if(isRepeatSubmit()){
			JMResult.fail(this, "不允许重复提交");
			return;
		}
		
		Label label = getModel(Label.class);
		int parent = label.getParent();
		if(parent != -1){
			Label parentLabel = labelDao.getById(parent);
			label.setParent(parent);
			label.setSeries(parentLabel.getSeries()+1);
		}
		if(image != null)
			label.setImage(image);
		
		label.setCreateTime(new Date());
		label.setType(JMLabelDao.TYPE_SHOP);
		if (labelDao.save(label)) {
			JMResult.success(this, "创建成功");
		}else {
			JMResult.fail(this, "创建失败");
		}
	}
	
	public void edit(){
		setToken();
		int id = getParaToInt("id");
		List<Label> labelList = labelDao.all(JMLabelDao.TYPE_SHOP);
		
		setAttr("labelList", labelList);
		setAttr("label", labelDao.getById(id));
		render(path+"/edit.html");
	}

	public void update(){
		String image = UploadUtil.uploadImg(this, "image", "/label");
		
		if(isRepeatSubmit()){
			JMResult.fail(this, "不允许重复提交");
			return;
		}
		
		Label label = getModel(Label.class);
		
		int parent = label.getParent();
		if(parent != -1){
			Label parentLabel = labelDao.getById(parent);
			label.setParent(parent);
			label.setSeries(parentLabel.getSeries()+1);
		}
		
		if(image != null)
			label.setImage(image);
		if (labelDao.update(label)) {
			JMResult.success(this, "修改成功");
		}else {
			JMResult.fail(this, "修改失败");
		}
	}
	
	public void delete(){
		int id = getParaToInt("id");
		
		if (labelDao.deleteById(id)) {
			JMResult.success(this, "删除成功");
		}else {
			JMResult.fail(this, "删除失败");
		}
	}
	
	public void dels(){
		Integer[] ids = getParaValuesToInt("ids");
		if(ids != null){
			boolean result = labelDao.deleteByIds(ids);
			if (result) {
				JMResult.success(this, "删除成功");
			}else {
				JMResult.fail(this, "删除失败");
			}
		}else {
			JMResult.fail(this, "请选择需要删除的数据");
		}
	}

}