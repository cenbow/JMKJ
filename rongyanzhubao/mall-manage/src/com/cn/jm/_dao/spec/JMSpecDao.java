
package com.cn.jm._dao.spec;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.cn._gen.dao.SpecDao;
import com.cn._gen.model.Spec;
import com.cn._gen.model.SpecAttribute;
import com.cn.jm._dao.sku.JMSkuDao;
import com.cn.jm.core.db.JMToolSql;
import com.cn.jm.core.tool.JMToolString;
import com.jfinal.aop.Inject;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;


/**
 * Generated by 广州小跑robot.
 */
public class JMSpecDao extends SpecDao{
	
	@Inject
	public JMSpecAttributeDao specAttributeDao ;
	@Inject
	public JMSkuDao skuDao ;
	
	
	public List<Spec> listspecByGoods(int goodsId){
		return JMToolSql.list(cacheName, new Spec(),"select id,value from shop_spec where id in (select specId from shop_spec_group where goodsId = ? group by specId)", goodsId);
	}	
	/**
	 * 
	 * @date 2019年1月26日 下午2:38:15
	 * @author JaysonLee
	 * @Description: 新增规格以及规格属性
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param name
	 * @param attrs
	 * @return
	 *
	 */
	public boolean add(String name,int shopMdId,String [] attrs){
		try {
			return Db.tx(new IAtom() {
				@Override
				public boolean run() throws SQLException {
					Spec spec = new Spec();
					spec.setValue(name);
					spec.setShopMdId(shopMdId);
					spec.setCreateTime(new Date());
					boolean b = save(spec);
					if(b){
						List<SpecAttribute> listattr = new ArrayList<>();
						for(String attr : attrs){
							SpecAttribute specAttribute = new SpecAttribute();
							specAttribute.setSpecId(spec.getId());
							specAttribute.setName(attr);
							listattr.add(specAttribute);
						}
						return (Db.batchSave(listattr,listattr.size())).length == attrs.length;
					}else return false;
					
				}
			});
		} catch (Exception e) {
			return false ;
		}
		
	}
	 
	/**
	 * 
	 * @date 2019年1月29日 下午3:20:54
	 * @author JaysonLee
	 * @Description: 更新sku
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param spec
	 * @param attrsId
	 * @param attrs
	 * @return
	 *
	 */
	public boolean updateSpec(Spec spec,Integer attrsId[],String [] attrs){
		try {
			return Db.tx(new IAtom() {
				@Override
				public boolean run() throws SQLException {
					update(spec);
					List<SpecAttribute> listattr = new ArrayList<>();
					String deleteIds = "";
					for(int i = 0;i<attrs.length;i++){
						String attr = attrs[i].replace(",","");//过滤掉里面的英文逗号
						Integer attrId = null ;
						if(i<attrsId.length){
							attrId = attrsId[i];
						}
						if(attrId == null){//新增的属性值
							SpecAttribute specAttribute = new SpecAttribute();
							specAttribute.setSpecId(spec.getId());
							specAttribute.setName(attr);
							listattr.add(specAttribute);
						}else{
							SpecAttribute specAttribute = specAttributeDao.getById(attrId,false);
							if(specAttribute == null){
								return false ;
							}
							deleteIds += specAttribute.getId()+",";
							String oldAttr = specAttribute.getName();
							if(oldAttr.equals(attr)){//新旧没变
								continue;
							}
							specAttribute.setName(attr);
							specAttributeDao.update(specAttribute);
							
							//同步个更新sku里面的skuCode
							skuDao.updateSkuCode(attrId, oldAttr, attr);
						}
					}
					if(JMToolString.isNotEmpty(deleteIds) && deleteIds.endsWith(",")){
						deleteIds = deleteIds.substring(0,deleteIds.length() - 1);
					}
					List<SpecAttribute> oldlistattr = specAttributeDao.listOld(spec.getId(), deleteIds);
					for(SpecAttribute specAttribute : oldlistattr){
						skuDao.delByAttrId(specAttribute.getId());//删除sku
						specAttributeDao.delete(specAttribute);//在名单里面的旧值需要被删除掉
					}
					return (Db.batchSave(listattr,listattr.size())).length == listattr.size();
				}
			});
		} catch (Exception e) {
			e.printStackTrace();
			return false ;
		}
		
	}
	
	/**
	 * 
	 * @date 2019年1月30日 上午11:23:27
	 * @author JaysonLee
	 * @Description: 根据模型查询规格属性
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param shopModId
	 * @return
	 *
	 */
	public List<Spec> listByShopModId(Integer shopModId){
		List<Spec> list = Spec.dao.find("select id,value from shop_spec where shopMdId = ?",shopModId);
		for(Spec spec : list){
			spec.put("attrs",specAttributeDao.listAttrsBySpecId(spec.getId()));
		}
		return list ;
	}
	
	public List<Spec> listByAttrs(String attrsId){
		List<Spec> list = Spec.dao.find("select id,value from shop_spec where id in (select specId from shop_spec_attribute where id in ("+attrsId+") group by specId)");
		return list ;
	}
	
}
