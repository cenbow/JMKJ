
package com.cn.jm._dao.goods;

import java.util.HashMap;
import java.util.List;

import com.cn._gen.dao.GoodsDao;
import com.cn._gen.model.Goods;
import com.cn._gen.model.GoodsResale;
import com.cn._gen.model.Label;
import com.cn.jm._dao.account.AccountEnum;
import com.cn.jm._dao.img.ImgEnum;
import com.cn.jm._dao.img.JMImgDao;
import com.cn.jm._dao.label.JMLabelDao;
import com.cn.jm._dao.search.JMSearchHistoryDao;
import com.cn.jm._dao.sku.JMSkuDao;
import com.cn.jm._dao.user.JMUserCollectDao;
import com.cn.jm.core.db.JMToolSql;
import com.cn.jm.core.tool.JMToolString;
import com.cn.jm.core.utils.util.JMResult;
import com.cn.jm.information.PromptInformationEnum;
import com.cn.jm.service.JMGoodsResaleService;
import com.cn.jm.service.JMRoomService;
import com.cn.jm.util.JMResultUtil;
import com.cn.jm.util.SqlUtil;
import com.jfinal.aop.Inject;
import com.jfinal.kit.HashKit;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;


/**
 * Generated by 广州小跑robot.
 */
public class JMGoodsDao extends GoodsDao{
	
	@Inject
	public JMSkuDao jmSkuDao ;
	@Inject
	public JMGoodsStarDao goodsStarDao ;
	@Inject
	public JMLabelDao labelDao ;
	@Inject
	public JMSearchHistoryDao searchHistoryDao ;
	@Inject
	public JMUserCollectDao userCollectDao ;
	@Inject
	JMImgDao imgDao;
	@Inject
	JMRoomService roomService;
	@Inject
	JMGoodsResaleService goodsResaleService;
	
	public Page<Goods> pageForApi(String keyword, int labelId,int type, String minprice, String maxprice,
			int serviceType, int pageNumber, int pageSize, Integer userId){
		String appendSql = "";
		HashMap<String, Object> andpm = new HashMap<>();
		HashMap<String, Object> likepm = new HashMap<>();
		String orderField = "createTime";
		String orderDirection = "DESC";
		andpm.put("state",0);//上架状态的
		if(!JMToolString.isEmpty(keyword)){
			likepm.put("name", keyword);
			searchHistoryDao.add(userId,keyword,null);
		}
		
		//查找类型-1：默认排序（按照时间倒序） 0：推荐 1：热门 2：最新 3：销量DESC 4：销量ASC 5：价格DESC 6：价格ASC 7:最旧
		if(type != -1){
			switch (type) {
			case 0:
				andpm.put("recommend",1);
				break;
			case 1:
				andpm.put("ishot",1);
				break;
			case 2:
				orderField = "createTime";
				orderDirection = "DESC";
				break;
			case 3:
				orderField = "sellCount";
				orderDirection = "DESC";
				break;
			case 4:
				orderField = "sellCount";
				orderDirection = "ASC";
				break;
			case 5:
				orderField = "price";
				orderDirection = "DESC";
				break;
			case 6:
				orderField = "price";
				orderDirection = "ASC";
				break;
			case 7:
				orderField = "createTime";
				orderDirection = "ASC";
			default:
				break;
			}
		}
		if(maxprice != null){
			 appendSql = JMToolSql.format("AND price BETWEEN '%s' AND '%s' ",minprice,maxprice);
		}else{
			appendSql = JMToolSql.format("AND price >= '%s' ",minprice);
		}
		if(labelId != -1){
			//appendSql += JMToolSql.format(" and id in (select ids from tb_label_relation where labelId = '%s') ",labelId);
			andpm.put("labelId",labelId);
		}
		if(serviceType != -1){
			andpm.put("serviceType", serviceType);
		}
		//只能搜索出商家已经上架的商品
		andpm.put("accountType", AccountEnum.TYPE_SHOP.getValue());
		Page<Goods> page = page(pageNumber, pageSize,
				null, andpm, null, likepm, appendSql, orderField, orderDirection, true);
		for(Goods goods : page.getList()){
			goods.put("collectedNum", userCollectDao.collectNum(goods.getId()));
			goods.put("skuList", jmSkuDao.listSKuByGoodsId(goods.getId()));
			goods.put("specList", jmSkuDao.listByGoodsId(goods.getId()));
			goods.put("goodsComment", goodsStarDao.getByGoodsId(goods.getId()));
			goods.put("isCollected", userCollectDao.isCollected(userId, goods.getId()));
			goods.put("isBroad", roomService.isBroad(goods.getRoomId()));
		}
		return page ;
	}

	/**
	 * 
	 * @date 2019年1月24日 上午11:57:35
	 * @author JaysonLee
	 * @Description: 商品详情
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param goodsId
	 * @return
	 *
	 */
	public Goods detail(int goodsId,Integer userId){
		Goods goods = getById(goodsId,false);
		if(goods == null) {
			return null;
		}
		goods.put("collectedNum", userCollectDao.collectNum(goodsId));
		goods.put("skuList", jmSkuDao.listSKuByGoodsId(goodsId));
		goods.put("specList", jmSkuDao.listByGoodsId(goodsId));
		goods.put("goodsComment", goodsStarDao.getBySellerAccountId(goodsId));
		goods.put("isCollected", userCollectDao.isCollected(userId, goodsId));
		goods.put("detailsList", imgDao.selectByTypeAndIds(goodsId, ImgEnum.GOODS_DETAILS_TYPE));
		goods.put("ownerList", imgDao.selectByTypeAndIds(goodsId, ImgEnum.GOODS_OWNER_TYPE));
		goods.put("recommendList", selectRecommendGoods(goods.getLabelId(), userId));
		return goods ;
	}
	
	/**
	 * 
	 * @date 2019年7月8日 16:43:45
	 * @Description: html商品详情
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param goodsId
	 * @return
	 *
	 */
	public Goods htmlDetail(int goodsId, Integer goodsResaleId){
		Goods goods = getById(goodsId,false);
		GoodsResale goodsResale = goodsResaleId != null?goodsResaleService.selectById(goodsResaleId):null;
		if(goodsResale != null) {
			if(GoodsResaleEnum.NEWLY_ADDED.identical(goodsResale.getImageState())) {
				goods.put("detailsList", imgDao.selectByTypeAndIds(goodsResaleId, ImgEnum.RESALE_GOODS__DETAILS_TYPE));
			}
			goods.setPrice(goods.getResalePrice());
		}else {
			goods.put("detailsList", imgDao.selectByTypeAndIds(goodsId, ImgEnum.GOODS_DETAILS_TYPE));
		}
		goods.put("skuList", jmSkuDao.listSKuByGoodsId(goodsId));
		goods.put("specList", jmSkuDao.listByGoodsId(goodsId));
		goods.put("goodsComment", goodsStarDao.getBySellerAccountId(goodsId));
		return goods ;
	}
	
	/**
	 * 
	 * @date 2019年1月24日 上午11:57:35
	 * @author JaysonLee
	 * @Description: 商品详情
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param goodsId
	 * @return
	 *
	 */
	public JMResult resaleGoodsDetail(int goodsResaleId,Integer userId){
		GoodsResale goodsResale = goodsResaleService.selectById(goodsResaleId);
		if(goodsResale == null) {
			return JMResultUtil.fail(PromptInformationEnum.GOODS_NOT_EXISTENCE);
		}
		Integer goodsId = goodsResale.getGoodsId();
		Goods goods = getById(goodsId,false);
		goods.put("collectedNum", userCollectDao.collectNum(goodsId));
		goods.put("skuList", jmSkuDao.listSKuByGoodsId(goodsId));
		goods.put("specList", jmSkuDao.listByGoodsId(goodsId));
		goods.put("goodsComment", goodsStarDao.getBySellerAccountId(goodsId));
		goods.put("isCollected", userCollectDao.isCollected(userId, goodsId));
		if(GoodsResaleEnum.ORIGINAL_IMAGE.identical(goodsResale.getImageState())) {
			goods.put("detailsList", imgDao.selectByTypeAndIds(goodsId, ImgEnum.GOODS_DETAILS_TYPE));
		}else {
			goods.put("detailsList", imgDao.selectByTypeAndIds(goodsResaleId, ImgEnum.RESALE_GOODS__DETAILS_TYPE));
		}
		goods.put("ownerList", imgDao.selectByTypeAndIds(goodsId, ImgEnum.GOODS_OWNER_TYPE));
		goods.put("recommendList", selectRecommendGoods(goods.getLabelId(), userId));
		goods.put("imageState", goodsResale.getImageState());
		goods.put("describe", goodsResale.getDescribe());
		return JMResultUtil.success(goods) ;
	}
	
	/**
	 * 搜索出两个推荐的商品
	 * @param goodsId
	 * @return
	 */
	private List<Goods> selectRecommendGoods(Integer labelId, Integer accountId) {
		List<Goods> goodsList = dao.find("SELECT * FROM shop_goods WHERE labelId = " + labelId + " ORDER BY RAND() LIMIT 2");
		for(Goods goods : goodsList){
			goods.put("collectedNum", userCollectDao.collectNum(goods.getId()));
			goods.put("isCollected",userCollectDao.isCollected(accountId, goods.getId()));
		}
		return goodsList;
	}

	/**
	 * 
	 * @date 2019年1月24日 下午3:21:24
	 * @author JaysonLee
	 * @Description: 获取商品标签
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @return
	 *
	 */
	public List<Label> goodsLabel(Integer parentId){
		List<Label> list = null ;
		if(parentId == null){
			list = labelDao.all(JMLabelDao.TYPE_SHOP);
		}else{
			list = labelDao.all(parentId, JMLabelDao.TYPE_SHOP);
		}
		return list ;
	}
	
	/**
	 * 
	 * @date 2019年2月14日 上午11:54:05
	 * @author JaysonLee
	 * @Description: 批量冻结
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param ids
	 * @param size
	 * @return
	 *
	 */
	public boolean fzsbyIds(String ids,int size){
		int result =Db.update("update shop_goods set state = 1 where id in ("+ids+")");
		clearCache();
		return result == size;
	}
	
	/**
	 * 
	 * @date 2019年2月14日 上午11:58:49
	 * @author JaysonLee
	 * @Description: 批量解冻
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param ids
	 * @param size
	 * @return
	 *
	 */
	public boolean unfzByIds(String ids,int size){
		int result =Db.update("update shop_goods set state = 0 where id in ("+ids+")");
		clearCache();
		return result == size;
	} 
	
	/**
	 * 
	 * @date 2019年3月18日 下午4:32:48
	 * @author JaysonLee
	 * @Description: 批量设置推荐
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param ids
	 * @param size
	 * @param state
	 * @return
	 *
	 */
	public boolean setRecommendByIds(String ids,int size,int state){
		int result =Db.update("update shop_goods set recommend = "+state+" where id in ("+ids+")");
		clearCache();
		return result == size;
	} 
	
	/**
	 * 
	 * @date 2019年3月18日 下午4:33:12
	 * @author JaysonLee
	 * @Description: 批量设置热门
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param ids
	 * @param size
	 * @param state
	 * @return
	 *
	 */
	public boolean setHotByIds(String ids,int size,int state){
		int result =Db.update("update shop_goods set ishot = "+state+" where id in ("+ids+")");
		clearCache();
		return result == size;
	}

	public Page<Goods> pageForApi(Integer columnId, Integer pageNumber, Integer pageSize, Integer userId) {
		StringBuilder fromSql = new StringBuilder();
		fromSql.append(" FROM shop_goods sg ");
		SqlUtil.addSql(fromSql, " INNER JOIN tb_label_relation tlr ON tlr.ids = sg.id INNER JOIN tb_label tl ON tl.id = tlr.labelId AND tl.type = 4 WHERE tl.id = ", columnId);
		fromSql.append(" AND sg.type =").append(GoodsEnum.SHOP_GOODS_TYPE);
		fromSql.append(" AND sg.state = ").append(GoodsEnum.UPPER_SHELF_STATE);
		fromSql.append(" AND sg.accountType = ").append(AccountEnum.TYPE_SHOP);
		fromSql.append(" ORDER BY sg.id DESC");
		Page<Goods> page = dao.paginate(pageNumber, pageSize, "SELECT sg.id id,sg.name,sg.price,sg.thumbnail,sg.video,sg.resaleNum,sg.createTime", fromSql.toString());
		for(Goods goods : page.getList()){
			goods.put("collectedNum", userCollectDao.collectNum(goods.getId()));
			goods.put("goodsComment",goodsStarDao.getByGoodsId(goods.getId()));
			goods.put("isCollected",userCollectDao.isCollected(userId, goods.getId()));
		}
		return page;
	}
	
	public Page<Goods> page(Integer pageNumber, Integer pageSize, String keyword, String artNo, String startTime,
			String endTime, int state, int labelId, int accountId, boolean isCache){
		StringBuilder selectSql = new StringBuilder("SELECT sg.id,sg.name,sg.artNo,sg.price,sg.resalePrice,sg.resaleNum,sg.state,sg.createTime,wr.name roomName,tl.name labelName,tau.nick accountNick ");
		StringBuilder fromSql = new StringBuilder(" FROM shop_goods sg ")
			.append(" LEFT JOIN tb_label tl ON sg.labelId = tl.id ")
			.append(" LEFT JOIN webcast_room wr ON wr.id = sg.roomId ")
			.append(" LEFT JOIN tb_account_user tau ON tau.accountId = sg.userId ")
			.append(" WHERE sg.state != 2 AND sg.userId = ").append(accountId);
		if(StrKit.notBlank(keyword)) {
			keyword = SqlUtil.replaceStr("%"+keyword+"%");
			fromSql.append(String.format(" AND (sg.id LIKE %s OR wr.name LIKE %s OR sg.name LIKE %s) ", keyword, keyword, keyword));
		}
		SqlUtil.addWhere(fromSql, " AND sg.state =", state, -1);
		SqlUtil.addWhere(fromSql, " AND sg.artNo =", artNo);
		SqlUtil.addWhere(fromSql, " AND sg.labelId =", labelId, -1);
		SqlUtil.addBetweenTime(fromSql, startTime, endTime, " AND sg.createTime");
		fromSql.append(" ORDER BY sg.id DESC");
		SqlUtil.changeWhere(fromSql);
		String strFromSql = SqlUtil.getSql(fromSql);
		String strSelectSql = selectSql.toString();
		return isCache?dao.paginateByCache(cacheName,HashKit.md5(selectSql.append(strFromSql).toString()), pageNumber, pageSize,false,strSelectSql, strFromSql)
			:dao.paginate(pageNumber, pageSize, false, strSelectSql,strFromSql);
	}

	public int addResaleNum(Integer goodsId) {
		return Db.update("UPDATE shop_goods SET resaleNum = resaleNum + 1 WHERE id = " + goodsId);
	}

	public int subtractResaleNum(Integer goodsId) {
		return Db.update("UPDATE shop_goods SET resaleNum = resaleNum - 1 WHERE id = " + goodsId);
	}

	public void deleteGoodsById(Integer id) {
		Goods goods = getById(id);
		goods.setState(GoodsEnum.DELETE_STATE.getCode());
		update(goods);
	}

	public List<Goods> htmlNewGoods(Integer accountId) {
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT sg.id,sg.thumbnail,DATE_FORMAT(sg.createTime,'%m月%d日') formatTime");
		sql.append(" FROM shop_goods sg ");
		sql.append(" LEFT JOIN shop_goods_resale sgr ON sgr.goodsId = sg.id");
		sql.append(" WHERE ");
		sql.append(" (sgr.accountId = ").append(accountId).append(" OR sg.userId = ").append(accountId).append(" )");
		sql.append(" AND DATEDIFF(CURDATE(), sg.createTime) <= 5 AND DATEDIFF(CURDATE(), sg.createTime) > -1");
		sql.append(" AND sg.type = ").append(GoodsEnum.SHOP_GOODS_TYPE);
		sql.append(" AND sg.state != ").append(GoodsEnum.DELETE_STATE);
		sql.append(" ORDER BY sg.createTime DESC");
		return Goods.dao.find(sql.toString());
	}
	
	public int updateGoodsType(int accountId, int type) {
		return Db.update("UPDATE shop_goods SET accountType = " + type + " WHERE accountId = " + accountId);
	}
}
