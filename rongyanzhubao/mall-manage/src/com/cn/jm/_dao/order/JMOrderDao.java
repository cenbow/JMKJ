
package com.cn.jm._dao.order;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;

import com.cn._gen.dao.OrderDao;
import com.cn._gen.model.Account;
import com.cn._gen.model.Address;
import com.cn._gen.model.Goods;
import com.cn._gen.model.GoodsCart;
import com.cn._gen.model.Order;
import com.cn._gen.model.OrderGoods;
import com.cn._gen.model.RefundGoods;
import com.cn._gen.model.RefundOrder;
import com.cn._gen.model.Sku;
import com.cn.jm._dao._base.common.JMCommonDao;
import com.cn.jm._dao.account.JMAccountDao;
import com.cn.jm._dao.address.JMAddressDao;
import com.cn.jm._dao.goods.JMGoodsCartDao;
import com.cn.jm._dao.goods.JMGoodsDao;
import com.cn.jm._dao.refund.JMRefundGoodsDao;
import com.cn.jm._dao.refund.JMRefundOrderDao;
import com.cn.jm._dao.sku.JMSkuDao;
import com.cn.jm.core.db.JMToolSql;
import com.cn.jm.core.tool.JMToolString;
import com.cn.jm.core.tool.ToolTimer;
import com.cn.jm.core.utils.util.JMResult;
import com.cn.jm.core.utils.util.NoUtils;
//import com.cn.jm.service.JMOrderService;
import com.cn.jm.util.JMResultUtil;
import com.jfinal.aop.Before;
import com.jfinal.aop.Inject;
//import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.tx.Tx;
import com.jfinal.plugin.redis.Cache;
import com.jfinal.plugin.redis.Redis;

import redis.clients.jedis.Jedis;

/**
 * Generated by 广州小跑robot.
 */
public class JMOrderDao extends OrderDao {

	@Inject
	public JMCommonDao commonDao;
	@Inject
	public JMGoodsDao goodsDao;
	@Inject
	public JMOrderGoodsDao orderGoodsDao;
	@Inject
	public JMAccountDao jmAccountDao;
	@Inject
	public JMSkuDao skuDao;
	@Inject
	public JMAddressDao addressDao;
	@Inject
	public JMGoodsCartDao goodsCartDao;
	@Inject
	public JMRefundOrderDao refundOrderDao;
	@Inject
	public JMRefundGoodsDao refundGoodsDao;

	public static final int BUY_NOW = 0;

	public static final int BUY_CART = 1;

	public static final int REFUND_ONLY_MONEY = 0;// 仅退款

	public static final int REFUND_MONEY_GOODS = 1;// 退货退款

	public static final String REDIS_ORDER = "order";

	public static final String GOODS_ORDER = "G";

	public static final String REFUND_ORDER = "R";

	public static final String NOPAY_LIST = "NOPAY_LIST";// 未付款订单
	/**
	 * 取消订单
	 */
	public static final int CANCEL = 6;

	/**
	 * 已发货
	 */
	public static final int DELIVERED = 7;

	/**
	 * 
	 * @date 2019年6月20日 下午12:06:54
	 * @author JaysonLee
	 * @Description: 立即购买订单
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param goodsId
	 * @param num
	 * @param addressId
	 * @param userId
	 * @param skuId
	 * @param remark
	 * @return
	 * @throws Exception
	 *
	 */
	@Before(Tx.class)
	public JMResult create(int goodsId, Integer addressId, int userId, String remark) throws Exception {
		Account user = jmAccountDao.getById(userId);
		if (user == null || user.getState() != 0) {
			return JMResult.create().code(JMResult.FAIL).desc("用户不可用");
		}
		// num = num <= 0 ? 1 : num;
		Goods goods = goodsDao.getById(goodsId);
		if (goods == null) {
			return JMResult.create().code(JMResult.FAIL).desc("商品不存在");
		}
		// Sku sku = skuDao.getByIdAndGoodsId(goodsId,skuId);
		// if(sku == null){
		// return JMResult.create().code(JMResult.FAIL).desc("商品规格不存在");
		// }
		if (goods.getState() == 0) {
			String no = NoUtils.createOutTradeNo(GOODS_ORDER);// 订单号
			Order order = new Order();
			order.setOrderNo(no);
			order.setAccountId(userId);
			order.setDesc(remark);
			order.setType(BUY_NOW);
			order.setCreateTime(new Date());
			order.setState(0);
			setOrderAddress(addressId, order);
			// order.setMoney(sku.getPrice().multiply(new BigDecimal(num)));
			order.setMoney(goods.getPrice());
			order.setGoodsId(goodsId);
			// 算运费
			// JSONObject jsonObject =
			// JSONObject.parseObject("{\"skuList\":[{\"num\":"+num+",\"skuId\":"+skuId+"}]}");
			// JSONArray array = jsonObject.getJSONArray("skuList");
			// List<GoodsCart> goodsCards = array.toJavaList(GoodsCart.class);
			// if (CollectionsUtils.isEmpty(goodsCards)) {
			// return JMResult.fail(this,"请选择商品");
			// }
			// JMResult freightResult = freightService.calculationFreight(addressId,
			// goodsCards, userId);
			// if(freightResult.getCode() != JMResult.SUCCESS) {
			// return freightResult ;
			// }

			// HashMap<String,Object> dataHashMap = (HashMap<String, Object>)
			// freightResult.getData();
			//
			// BigDecimal freightBigDecimal = (BigDecimal) dataHashMap.get("freight");
			//
			// order.setFreight(freightBigDecimal);//运费
			// order.setMoney(order.getMoney().add(freightBigDecimal));//总额加上运费

			if (save(order)) {
				OrderGoods orderGoods = new OrderGoods();
				orderGoods.setOrderId(order.getId());
				orderGoods.setOrderNo(order.getOrderNo());
				orderGoods.setGoodsId(goods.getId());
				// orderGoods.setSkuId(skuId);
				// orderGoods.setSkuCode(sku.getSkuCode());
				orderGoods.setGoodsName(goods.getName());
				orderGoods.setSkuImg(goods.getThumbnail());
				orderGoods.setNum(1);
				orderGoods.setPrice(goods.getPrice());
				orderGoods.setState(0);
				orderGoods.setCreateTime(new Date());
				orderGoodsDao.save(orderGoods);

				// sku.setStock(sku.getStock() - num);
				// skuDao.update(sku);

				// 塞进定时器队列
				Cache cache = Redis.use();
				Jedis jedis = cache.getJedis();

				try {
					jedis.select(1);
					jedis.setex(order.getOrderNo(), 3600 * 24, order.getId().toString());
				} finally {
					cache.close(jedis);
				}

				return JMResult.create().code(JMResult.SUCCESS).data(order.getOrderNo()).desc("创建订单成功");
			} else {
				throw new Exception("保存订单失败");
			}
		} else {
			return JMResult.create().code(JMResult.FAIL).desc("该商品已下架");
		}
	}
	
	public void setOrderAddress(Integer addressId, Order order) {
		if(addressId != null) {
			Address address = addressDao.getById(addressId);
			if (address != null) {
				order.setAddress(address.getSheng() + address.getShi() + address.getQu() + address.getAddress());
				order.setAddressName(address.getName());
				order.setAddressPhone(address.getMobile());
			}
		}
	}
	// /**
	// *
	// * @date 2019年6月20日 下午12:06:54
	// * @author JaysonLee
	// * @Description: 立即购买订单
	// * @reqMethod post
	// * @paramter
	// * @pDescription
	// * @param goodsId
	// * @param num
	// * @param addressId
	// * @param userId
	// * @param skuId
	// * @param remark
	// * @return
	// * @throws Exception
	// *
	// */
	// @Before(Tx.class)
	// public JMResult create(int goodsId, int num, int addressId, int userId,int
	// skuId,String remark) throws Exception{
	// Account user = jmAccountDao.getById(userId);
	// if(user == null || user.getState() != 0){
	// return JMResult.create().code(JMResult.FAIL).desc("用户不可用");
	// }
	// num = num <= 0 ? 1 : num;
	// Goods goods = goodsDao.getById(goodsId);
	// if(goods == null){
	// return JMResult.create().code(JMResult.FAIL).desc("商品不存在");
	// }
	// Sku sku = skuDao.getByIdAndGoodsId(goodsId,skuId);
	// if(sku == null){
	// return JMResult.create().code(JMResult.FAIL).desc("商品规格不存在");
	// }
	// if(goods.getState() == 0){
	// Address address= addressDao.getById(addressId);
	// if(address != null && address.getUserId().equals(userId)){
	// String no = NoUtils.createOutTradeNo(GOODS_ORDER);//订单号
	// Order order = new Order();
	// order.setOrderNo(no);
	// order.setAccountId(userId);
	// order.setDesc(remark);
	// order.setType(BUY_NOW);
	// order.setCreateTime(new Date());
	// order.setState(0);
	// order.setAddress(address.getSheng()+address.getShi()+address.getQu()+address.getAddress());
	// order.setAddressName(address.getName());
	// order.setAddressPhone(address.getMobile());
	// order.setMoney(sku.getPrice().multiply(new BigDecimal(num)));
	//
	// //算运费
	// JSONObject jsonObject =
	// JSONObject.parseObject("{\"skuList\":[{\"num\":"+num+",\"skuId\":"+skuId+"}]}");
	// JSONArray array = jsonObject.getJSONArray("skuList");
	// List<GoodsCart> goodsCards = array.toJavaList(GoodsCart.class);
	// if (CollectionsUtils.isEmpty(goodsCards)) {
	// return JMResult.fail(this,"请选择商品");
	// }
	//// JMResult freightResult = freightService.calculationFreight(addressId,
	// goodsCards, userId);
	//// if(freightResult.getCode() != JMResult.SUCCESS) {
	//// return freightResult ;
	//// }
	//
	//// HashMap<String,Object> dataHashMap = (HashMap<String, Object>)
	// freightResult.getData();
	////
	//// BigDecimal freightBigDecimal = (BigDecimal) dataHashMap.get("freight");
	////
	//// order.setFreight(freightBigDecimal);//运费
	//// order.setMoney(order.getMoney().add(freightBigDecimal));//总额加上运费
	// order.setMoney(order.getMoney());//总额加上运费
	//
	// if(save(order)){
	// OrderGoods orderGoods = new OrderGoods();
	// orderGoods.setOrderId(order.getId());
	// orderGoods.setOrderNo(order.getOrderNo());
	// orderGoods.setGoodsId(goods.getId());
	// orderGoods.setSkuId(skuId);
	// orderGoods.setSkuCode(sku.getSkuCode());
	// orderGoods.setGoodsName(goods.getName());
	// orderGoods.setSkuImg(sku.getImage());
	// orderGoods.setNum(num);
	// orderGoods.setPrice(sku.getPrice());
	// orderGoods.setState(0);
	// orderGoods.setCreateTime(new Date());
	// orderGoodsDao.save(orderGoods);
	//
	// sku.setStock(sku.getStock() - num);
	// skuDao.update(sku);
	//
	// //塞进定时器队列
	// Cache cache = Redis.use();
	// Jedis jedis = cache.getJedis();
	//
	// try{
	// jedis.select(1);
	// jedis.setex(order.getOrderNo(),3600*24,order.getId().toString());
	// }finally{
	// cache.close(jedis);
	// }
	//
	//
	// return
	// JMResult.create().code(JMResult.SUCCESS).data(order.getOrderNo()).desc("创建订单成功");
	// }else{
	// throw new Exception("保存订单失败");
	// }
	// }else{
	// return JMResult.create().code(JMResult.FAIL).desc("收货地址不正确");
	// }
	// }else{
	// return JMResult.create().code(JMResult.FAIL).desc("该商品已下架");
	// }
	// }

	/**
	 * 
	 * @date 2019年6月20日 下午12:07:08
	 * @author JaysonLee
	 * @Description: 购物车购买订单
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param cartIds
	 * @param addressId
	 * @param userId
	 * @param remark
	 * @return
	 * @throws Exception
	 *
	 */
	@Before(Tx.class)
	public JMResult createCartOrder(String cartIds, int addressId, int userId, String remark) throws Exception {
		Account user = jmAccountDao.getById(userId);
		if (user == null || user.getState() != 0) {
			return JMResult.create().code(JMResult.FAIL).desc("用户不可用");
		}

		String carIdStr[] = cartIds.split(",");
		List<OrderGoods> orderGoodsList = new ArrayList<>();
		BigDecimal money = BigDecimal.ZERO;
		List<GoodsCart> listGoodsCarts = new ArrayList<>();
		for (String cartId : carIdStr) {
			GoodsCart goodsCart = goodsCartDao.getById(Integer.valueOf(cartId));

			Goods goods = goodsDao.getById(goodsCart.getGoodsId(), false);
			if (goods == null) {
				return JMResult.create().code(JMResult.FAIL).desc("商品不存在");
			}
			Sku sku = skuDao.getByIdAndGoodsId(goodsCart.getGoodsId(), goodsCart.getSkuId());
			if (sku == null) {
				return JMResult.create().code(JMResult.FAIL).desc("商品规格不存在");
			}
			if (sku.getStock() < goodsCart.getNum()) {
				return JMResult.create().code(JMResult.FAIL).desc(goodsCart.getName() + sku.getSkuCode() + "商品规格库存不足");
			}

			if (goods.getState() == 0) {

				OrderGoods orderGoods = new OrderGoods();
				orderGoods.setGoodsId(goods.getId());
				orderGoods.setSkuId(goodsCart.getSkuId());
				orderGoods.setSkuCode(sku.getSkuCode());
				orderGoods.setGoodsName(goods.getName());
				orderGoods.setSkuImg(sku.getImage());
				orderGoods.setNum(goodsCart.getNum());
				orderGoods.setPrice(goodsCart.getPrice());
				orderGoods.setState(0);
				orderGoods.setCreateTime(new Date());

				sku.setStock(sku.getStock() - goodsCart.getNum());
				skuDao.update(sku);
				orderGoodsList.add(orderGoods);

				money = money.add(goodsCart.getPrice().multiply(new BigDecimal(goodsCart.getNum())));
				// 算邮费用的
				listGoodsCarts.add(goodsCart.remove("id", "goodsId", "userId", "price", "name", "image", "createTime"));
			} else {
				return JMResult.create().code(JMResult.FAIL).desc("该商品已下架");
			}

		}

		Address address = addressDao.getById(addressId);
		if (address != null && address.getUserId().equals(userId)) {
			String no = NoUtils.createOutTradeNo(GOODS_ORDER);// 订单号
			Order order = new Order();
			order.setOrderNo(no);
			order.setAccountId(userId);
			order.setDesc(remark);
			order.setType(BUY_CART);
			order.setCreateTime(new Date());
			order.setState(0);
			order.setAddress(address.getSheng() + address.getShi() + address.getQu() + address.getAddress());
			order.setAddressName(address.getName());
			order.setAddressPhone(address.getMobile());

			order.setMoney(money);
			// //计算邮费
			// JMResult freightResult = freightService.calculationFreight(addressId,
			// listGoodsCarts, userId);
			// if(freightResult.getCode() != JMResult.SUCCESS) {
			// return freightResult ;
			// }
			//
			// HashMap<String,Object> dataHashMap = (HashMap<String, Object>)
			// freightResult.getData();
			//
			// BigDecimal freightBigDecimal = (BigDecimal) dataHashMap.get("freight");
			//
			// order.setFreight(freightBigDecimal);//运费
			// order.setMoney(order.getMoney().add(freightBigDecimal));//总额加上运费
			order.setMoney(order.getMoney());// 总额加上运费

			if (save(order)) {
				for (OrderGoods orderGoods : orderGoodsList) {
					orderGoods.setOrderId(order.getId());
					orderGoods.setOrderNo(order.getOrderNo());
					orderGoodsDao.save(orderGoods);
				}
				goodsCartDao.del(userId, cartIds);// 删除购物车

				// 塞进队列
				Cache cache = Redis.use();
				Jedis jedis = cache.getJedis();

				try {
					jedis.select(1);
					jedis.setex(order.getOrderNo(), 3600 * 24, order.getId().toString());
				} finally {
					cache.close(jedis);
				}

				return JMResult.create().code(JMResult.SUCCESS).data(order.getOrderNo()).desc("创建订单成功");
			} else {
				throw new Exception("保存订单失败");
			}
		} else {
			return JMResult.create().code(JMResult.FAIL).desc("收货地址不正确");
		}

	}

	public Page<Order> pageMy(int pageNumber, int pageSize, int state, int userId) {
		HashMap<String, Object> andpm = new HashMap<>();
		andpm.put("accountId", userId);
		if (state != -1) {
			andpm.put("state", state);
		}
		andpm.put("isDel", 0);// 未删除状态
		Page<Order> page = page(pageNumber, pageSize, "*", andpm, "id", "DESC", true);
		for (Order order : page.getList()) {
			order.put("goodsList", orderGoodsDao.listByOrderId(order.getId()));
		}
		return page;
	}

	/**
	 * 
	 * @date 2019年2月18日 上午9:19:40
	 * @author JaysonLee
	 * @Description: 订单详情
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param userId
	 * @param orderId
	 * @return
	 *
	 */
	public Order detail(int userId, int orderId) {
		HashMap<String, Object> andpm = new HashMap<>();
		andpm.put("accountId", userId);
		andpm.put("isDel", 0);
		andpm.put("id", orderId);
		Order order = get(andpm, false);
		if (order != null) {
			order.put("goodsList", orderGoodsDao.listByOrderId(order.getId()));
		}
		return order;
	}

	/**
	 * 
	 * @date 2019年2月18日 上午9:57:38
	 * @author JaysonLee
	 * @Description: 前端用户删除订单
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param userId
	 * @param orderId
	 * @return
	 *
	 */
	public boolean delOrder(int userId, int orderId) {
		HashMap<String, Object> andpm = new HashMap<>();
		andpm.put("accountId", userId);
		andpm.put("isDel", 0);
		andpm.put("id", orderId);
		Order order = get(andpm, false);
		if (order != null) {
			order.setIsDel(1);// 删除状态
			return update(order);
		}
		return false;
	}

	public JMResult cancel(int userId, int orderId) {
		HashMap<String, Object> param = new HashMap<>();
		param.put("accountId", userId);
		param.put("id", orderId);
		param.put("state", 0);
		Order order = get(param, false);
		if (order == null) {
			return JMResult.create().code(JMResult.FAIL).desc("非法操作，无效订单");
		}
		order.setState(CANCEL);// 取消订单
		if (update(order)) {
			return JMResult.create().code(JMResult.SUCCESS).desc("取消订单成功");
		}
		return JMResult.create().code(JMResult.FAIL).desc("操作失败");
	}

	public boolean cancelByNo(String no) {
		HashMap<String, Object> param = new HashMap<>();
		param.put("orderNo", no);
		param.put("state", 0);
		Order order = get(param, false);
		if (order != null) {
			order.setState(CANCEL);// 取消订单
			return update(order);
		}
		return false;
	}

//	/**
//	 * 
//	 * @date 2019年1月8日 上午11:40:05
//	 * @author JaysonLee
//	 * @Description: 自动处理退款
//	 * @reqMethod post
//	 * @paramter
//	 * @pDescription
//	 * @param no
//	 * @return
//	 *
//	 */
//	public boolean automaticRefund(String no) {
//		HashMap<String, Object> param = new HashMap<>();
//		param.put("no", no);
//		param.put("state", 0);
//		RefundOrder refundOrder = refundOrderDao.get(param, false);
//		if (refundOrder != null) {// 申请未处理的
//			Order order = getById(refundOrder.getOrderId());
//			JMResult jmResult = new JMOrderService().doubleBack(order, refundOrder.getMoney(), order.getAccountId());
//			if (jmResult.getCode() != JMResult.SUCCESS) {// 退款不成功
//				return false;
//			}
//			order.setState(5);// 已退款
//			order.setRefundState(2);// 已处理退款
//			update(order);
//
//			refundOrder.setState(10);// 系统自动处理退款
//			refundOrder.setRefundTime(new Date());
//			refundOrderDao.update(refundOrder);
//
//			Db.update("update shop_order_goods set state = 3 where state = 2 and orderId = ?",
//					refundOrder.getOrderId());
//
//			return true;
//		} else {// 其他情况的
//			param.put("state", 6);
//			param.put("type", 1);// 退货退款的
//			refundOrder = refundOrderDao.get(param, false);// 已上传物流单号的
//			if (refundOrder != null) {
//				Order order = getById(refundOrder.getOrderId());
//				JMResult jmResult = new JMOrderService().doubleBack(order, refundOrder.getMoney(),
//						order.getAccountId());
//				if (jmResult.getCode() != JMResult.SUCCESS) {// 退款不成功
//					return false;
//				}
//				order.setState(5);// 已退款
//				order.setRefundState(2);// 已处理退款
//				update(order);
//
//				refundOrder.setState(10);// 系统自动处理退款
//				refundOrder.setRefundTime(new Date());
//				refundOrderDao.update(refundOrder);
//
//				Db.update("update shop_order_goods set state = 3 where state = 2 and orderId = ?",
//						refundOrder.getOrderId());
//
//				return true;
//			}
//		}
//		return false;
//	}

	/**
	 * 
	 * @date 2019年1月28日 下午4:25:29
	 * @author JaysonLee
	 * @Description: 自动确认收货
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param no
	 * @return
	 *
	 */
	public boolean automaticReceived(String no) {
		HashMap<String, Object> param = new HashMap<>();
		param.put("no", no);
		param.put("state", 7);
		Order order = get(param, false);
		if (order != null) {
			order.setState(8);// 确认收货
			return update(order);
		}
		return false;
	}

//	public Order getByOrderNO(String no) {
//		HashMap<String, Object> param = new HashMap<>();
//		param.put("orderNo", no);
//		param.put("state", 0);
//		Order order = get(param, false);
//		return order;
//	}
	
	public Order getByOrderNO(String no) {
		return dao.findFirst("SELECT * FROM shop_order WHERE orderNo = ? AND (state = 0 OR state = 1)",no);
	}

	/**
	 * 
	 * @date 2019年1月4日 下午4:03:28
	 * @author JaysonLee
	 * @Description: 仅退款全部申请（发货前）
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param orderId
	 * @param accountId
	 * @param reason
	 * @return
	 *
	 */
	public JMResult toRefundAll(int orderId, int accountId, String reason) {
		LinkedHashMap<String, Object> param = new LinkedHashMap<>();
		param.put("id=", orderId);
		param.put("and accountId=", accountId);
		JMCommonDao.putIn(param, "and state", "2");

		Order order = commonDao.selectOne(Order.class, param);

		if (order == null) {
			return JMResult.create().code(JMResult.FAIL).desc("没有此订单");
		}

		order.setState(4);// 退款中
		order.setRefundState(1);// 订单存在售后
		update(order);

		RefundOrder refundOrder = new RefundOrder();
		refundOrder.setNo(NoUtils.createOutTradeNo(REFUND_ORDER));// 退款订单号
		refundOrder.setState(0);// 申请中
		refundOrder.setType(REFUND_ONLY_MONEY);
		refundOrder.setReason(reason);
		refundOrder.setOrderId(orderId);
		refundOrder.setMoney(order.getMoney());
		refundOrder.setUserId(accountId);
		refundOrder.setCreateTime(new Date());
		refundOrderDao.save(refundOrder);

		List<OrderGoods> orderGoodsList = orderGoodsDao.listByOrderId(order.getId());
		for (OrderGoods orderGoods : orderGoodsList) {
			orderGoods.setRefundNum(orderGoods.getNum());
			orderGoods.setState(2);// 仅退款中
			orderGoods.setRefundOrderId(refundOrder.getId());
			orderGoodsDao.update(orderGoods);

			RefundGoods refundGoods = new RefundGoods();
			refundGoods.setRefundNo(refundOrder.getNo());
			refundGoods.setRefundOrderId(refundOrder.getId());
			refundGoods.setGoodsId(orderGoods.getGoodsId());
			refundGoods.setSkuCode(orderGoods.getSkuCode());
			refundGoods.setSkuId(orderGoods.getSkuId());
			refundGoods.setSkuImg(orderGoods.getSkuImg());
			refundGoods.setGoodsName(orderGoods.getGoodsName());
			refundGoods.setOrderGoodsId(orderGoods.getId());
			refundGoods.setPrice(orderGoods.getPrice());
			refundGoods.setRefundNum(orderGoods.getRefundNum());
			refundGoods.setCreateTime(new Date());
			refundGoodsDao.save(refundGoods);
		}

		// 定时
		Cache cache = Redis.use();
		Jedis jedis = cache.getJedis();

		try {
			jedis.select(1);
			jedis.setex(refundOrder.getNo(), 3600 * 24 * 3, refundOrder.getId().toString());
		} finally {
			cache.close(jedis);
		}

		return JMResult.create().code(JMResult.SUCCESS).desc("申请退款成功，请耐心等待商家处理");

	}

//	/**
//	 * 
//	 * @date 2019年1月4日 下午5:53:09
//	 * @author JaysonLee
//	 * @Description: 处理仅退款订单
//	 * @reqMethod post
//	 * @paramter
//	 * @pDescription
//	 * @param refundId
//	 * @param state
//	 *            1已通过等待退款（针对仅退款）2不通过申请5已通过等待上传物流单号退货
//	 * @param refusedReason
//	 * @return
//	 *
//	 */
//	public JMResult dealAllRefund(int refundId, int state, String refusedReason) {
//		LinkedHashMap<String, Object> param = new LinkedHashMap<>();
//		param.put("id=", refundId);
//		param.put("and state=", 0);// 申请中
//		if (state == 1 || state == 2) {
//			JMCommonDao.putIn(param, "and type", "0,2");// 仅退款情况下
//		} else if (state == 5) {
//			param.put("and type=", 1);// 退货退款情况下
//		} else {
//			return JMResult.create().code(JMResult.FAIL).desc("非法操作--状态异常");
//		}
//		RefundOrder refundOrder = commonDao.selectOne(RefundOrder.class, param);
//		if (refundOrder == null) {
//			return JMResult.create().code(JMResult.FAIL).desc("没有此订单");
//		}
//		refundOrder.setState(state);
//		refundOrder.setAuditTime(new Date());
//		if (JMToolString.isNotEmpty(refusedReason)) {
//			refundOrder.setRefuseReason(refusedReason);
//		}
//		refundOrderDao.update(refundOrder);
//		if (state == 1) {// 同意状态下,等待退款
//			Order order = getById(refundOrder.getOrderId());
//			JMResult jmResult = new JMOrderService().doubleBack(order, refundOrder.getMoney(), order.getAccountId());
//			if (jmResult.getCode() != JMResult.SUCCESS) {
//				return jmResult;
//			}
//			order.setState(5);// 已退款
//			order.setRefundState(2);// 已处理退款
//			update(order);
//
//			refundOrder.setState(4);// 已退款
//			refundOrder.setRefundTime(new Date());
//			refundOrderDao.update(refundOrder);
//
//			Db.update("update shop_order_goods set state = 3 where state = 2 and orderId = ?",
//					refundOrder.getOrderId());
//		}
//		return JMResult.create().code(JMResult.SUCCESS).desc("操作成功");
//	}
//
//	/**
//	 * 
//	 * @date 2019年1月7日 下午7:04:22
//	 * @author JaysonLee
//	 * @Description: 处理退货退款
//	 * @reqMethod post
//	 * @paramter
//	 * @pDescription
//	 * @param refundId
//	 * @param state
//	 *            7上传物流单号后不通过8上传物流单号后通过等待退款
//	 * @param refusedReason
//	 * @return
//	 *
//	 */
//	public JMResult dealGoodsRefund(int refundId, int state, String refusedReason) {
//		LinkedHashMap<String, Object> param = new LinkedHashMap<>();
//		param.put("id=", refundId);
//		param.put("and state=", 6);// 已上传物流单号
//		param.put("and type=", 1);// 退货退款状态
//		RefundOrder refundOrder = commonDao.selectOne(RefundOrder.class, param);
//		if (refundOrder == null) {
//			return JMResult.create().code(JMResult.FAIL).desc("没有此订单");
//		}
//		refundOrder.setState(state);
//		refundOrder.setAuditTime(new Date());
//		if (JMToolString.isNotEmpty(refusedReason)) {
//			refundOrder.setRefuseReason(refusedReason);
//		}
//		refundOrderDao.update(refundOrder);
//		if (state == 8) {// 同意状态下,等待退款
//			Order order = getById(refundOrder.getOrderId());
//			JMResult jmResult = new JMOrderService().doubleBack(order, refundOrder.getMoney(), order.getAccountId());
//			if (jmResult.getCode() != JMResult.SUCCESS) {
//				return jmResult;
//			}
//			order.setState(5);// 已退款
//			order.setRefundState(2);// 已处理退款
//			update(order);
//
//			refundOrder.setState(4);// 已退款
//			refundOrder.setRefundTime(new Date());
//			refundOrderDao.update(refundOrder);
//
//			Db.update("update shop_order_goods set state = 3 where state = 2 and orderId = ?",
//					refundOrder.getOrderId());
//		}
//		return JMResult.create().code(JMResult.SUCCESS).desc("操作成功");
//	}

	/**
	 * 
	 * @date 2019年1月5日 上午10:19:25
	 * @author JaysonLee
	 * @Description: 申请退货退款订单
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param accountId
	 * @param ids
	 * @param orderId
	 * @param reason
	 * @param logisticsNo
	 * @param img1
	 * @param img2
	 * @param img3
	 * @param img4
	 * @param img5
	 * @param img6
	 * @return
	 *
	 */
	public JMResult toRefunds(int accountId, String ids, int orderId, String reason, List<String> imglist, int type) {
		HashMap<String, Object> param = new HashMap<>();
		param.put("id", orderId);
		param.put("accountId", accountId);
		param.put("state", 7);// 已发货
		Order order = get(param, false);
		if (order == null) {
			return JMResult.create().code(JMResult.FAIL).desc("没有此订单");
		}

		RefundOrder refundOrder = new RefundOrder();
		refundOrder.setNo(NoUtils.createOutTradeNo(REFUND_ORDER));// 退款订单号
		refundOrder.setState(0);// 申请中
		refundOrder.setReason(reason);
		refundOrder.setType(type);// 0仅退款（发货前）1退货退款 2仅退款（发货后未收到货）
		refundOrder.setUserId(accountId);
		refundOrder.setOrderId(orderId);
		if (reason != null) {
			refundOrder.setReason(reason);
		}
		for (int i = 0; i < imglist.size(); i++) {
			String img = imglist.get(i);
			if (img != null) {
				refundOrder.set("img" + (i + 1), img);
			}
		}
		refundOrder.setCreateTime(new Date());
		refundOrderDao.save(refundOrder);

		BigDecimal money = BigDecimal.ZERO;// 该退的钱
		String id_nums[] = ids.split(",");
		for (String id_num : id_nums) {
			String idNum[] = id_num.split("_");
			Integer orderGoodsId = Integer.valueOf(idNum[0]);
			int num = Integer.valueOf(idNum[1]);

			OrderGoods orderGoods = orderGoodsDao.getById(orderGoodsId);

			orderGoods.setRefundNum(num);
			orderGoods.setState(1);// 退货退款中
			orderGoods.setRefundOrderId(refundOrder.getId());
			orderGoodsDao.update(orderGoods);

			RefundGoods refundGoods = new RefundGoods();
			refundGoods.setRefundNo(refundOrder.getNo());
			refundGoods.setRefundOrderId(refundOrder.getId());
			refundGoods.setGoodsId(orderGoods.getGoodsId());
			refundGoods.setSkuCode(orderGoods.getSkuCode());
			refundGoods.setSkuId(orderGoods.getSkuId());
			refundGoods.setSkuImg(orderGoods.getSkuImg());
			refundGoods.setGoodsName(orderGoods.getGoodsName());
			refundGoods.setPrice(orderGoods.getPrice());
			refundGoods.setRefundNum(num);
			refundGoods.setOrderGoodsId(orderGoods.getId());
			refundGoods.setCreateTime(new Date());
			refundGoodsDao.save(refundGoods);

			money = money.add((refundGoods.getPrice().multiply(new BigDecimal(num))));
		}
		refundOrder.setMoney(money);
		refundOrderDao.update(refundOrder);
		order.setRefundState(1);// 订单存在售后
		update(order);
		// 七天定时
		Cache cache = Redis.use();
		Jedis jedis = cache.getJedis();

		try {
			jedis.select(1);
			jedis.setex(refundOrder.getNo(), 3600 * 24 * 7, refundOrder.getId().toString());
		} finally {
			cache.close(jedis);
		}

		return JMResult.create().code(JMResult.SUCCESS).desc("申请退款成功，请耐心等待商家处理");

	}

	/**
	 * 
	 * @date 2019年1月7日 下午7:33:31
	 * @author JaysonLee
	 * @Description: 上传物流单号
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param refundOrderId
	 * @param logisticsNo
	 * @param accountId
	 * @return
	 *
	 */
	public JMResult refundLogisticsNo(int refundOrderId, String logisticsNo, int accountId) {
		HashMap<String, Object> param = new HashMap<>();
		param.put("id", refundOrderId);
		param.put("userId", accountId);
		param.put("type", 1);
		param.put("state", 5);
		RefundOrder refundOrder = refundOrderDao.get(param, false);
		if (refundOrder == null) {
			return JMResult.create().code(JMResult.FAIL).desc("没有此订单");
		}
		refundOrder.setLogisticsNo(logisticsNo);
		// 物流公司自动识别待后
		refundOrder.setLogisticsName("");
		refundOrder.setState(6);// 已上传物流单号
		refundOrderDao.update(refundOrder);
		// 七天二次倒计时
		Cache cache = Redis.use();
		Jedis jedis = cache.getJedis();

		try {
			jedis.select(1);
			jedis.setex(refundOrder.getNo(), 3600 * 24 * 7, refundOrder.getId().toString());
		} finally {
			cache.close(jedis);
		}

		return JMResult.create().code(JMResult.SUCCESS).desc("上传单号成功，请耐心等待商家处理");
	}

	/**
	 * 
	 * @date 2019年1月8日 下午4:39:32
	 * @author JaysonLee
	 * @Description: 确认收货
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param accountId
	 * @param orderId
	 * @return
	 *
	 */
	public JMResult confirmReceipt(int accountId, int orderId) {
		LinkedHashMap<String, Object> param = new LinkedHashMap<>();
		param.put("id=", orderId);
		param.put("and accountId=", accountId);
		JMCommonDao.putIn(param, "and state", "7,10");
		Order order = commonDao.selectOne(Order.class, param);
		if (order == null) {
			return JMResult.create().code(JMResult.FAIL).desc("没有此订单");
		}
		order.setState(8);
		order.setFinishTime(new Date());
		if (update(order))
			return JMResult.create().code(JMResult.SUCCESS).desc("确认收货成功");
		return JMResult.create().code(JMResult.FAIL).desc("确认收货失败");
	}

	/**
	 * 
	 * @date 2019年1月26日 下午5:05:13
	 * @author JaysonLee
	 * @Description: 评论后更新订单状态
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param orderGoodsId
	 * @return
	 *
	 */
	public boolean upDateOrderByGoodsOrderId(int orderGoodsId) {
		OrderGoods orderGoods = orderGoodsDao.getById(orderGoodsId, false);
		if (orderGoods == null) {
			return false;
		}
		HashMap<String, Object> param = new HashMap<>();
		param.put("id", orderGoods.getOrderId());
		param.put("state", 8);// 确认收货待评价
		Order order = get(param, false);
		if (order == null) {
			return false;
		}
		order.setState(9);
		return update(order);
	}

	public Page<OrderGoods> pageSys(String keyword, String addressName, String startTime, String endTime, int states,
			int pageNumber, int pageSize, String address, String goodsName) {
		StringBuffer sql = new StringBuffer(
				" from shop_order_goods b left join shop_order a on a.id = b.orderId where 1=1 ");
		if (JMToolString.isNotEmpty(keyword)) {
			sql.append(" and a.orderNo like '%" + keyword + "%'");
		}
		if (JMToolString.isNotEmpty(addressName)) {
			sql.append(" and a.addressName like '%" + addressName + "%'");
		}
		if (JMToolString.isNotEmpty(address)) {
			sql.append(" and a.address like '%" + address + "%'");
		}
		if (JMToolString.isNotEmpty(goodsName)) {
			sql.append(" and b.goodsName like '%" + goodsName + "%'");
		}
		if (states != -1 && states != 4 && states != 5) {
			sql.append(" and a.state = " + states);
		}
		if (states == 4) {// 售后列表
			sql.append(" and a.refundState = 1 ");
		}
		if (states == 5) {// 售后列表
			sql.append(" and a.refundState = 2 ");
		}
		if (JMToolString.areNotEmpty(startTime, endTime)) {
			String appendSql = JMToolSql.format(" AND a.createTime BETWEEN '%s' AND DATE_ADD('%s',INTERVAL 1 DAY)",
					startTime, endTime);
			sql.append(appendSql);
		}
		sql.append(" order by a.id desc");
		Page<OrderGoods> page = OrderGoods.dao.paginate(pageNumber, pageSize,
				"select a.*,b.skuImg,b.price,b.num,b.goodsName", sql.toString());
		return page;
	}

	/**
	 * 
	 * @date 2019年2月26日 下午4:16:43
	 * @author JaysonLee
	 * @Description: 发货
	 * @reqMethod post
	 * @paramter
	 * @pDescription
	 * @param orderId
	 * @param logisticsNo
	 * @return
	 *
	 */
	public JMResult deliveryOrder(int orderId, String logisticsNo) {
		HashMap<String, Object> param = new HashMap<>();
		param.put("id", orderId);
		param.put("state", 2);
		Order order = get(param, false);
		if (order == null) {
			return JMResult.create().code(JMResult.FAIL).desc("该订单不存在，或者订单状态异常");
		}
		order.setExpressNo(logisticsNo);
		order.setState(DELIVERED);// 已发货
		update(order);

		// 定时十天收货
		ToolTimer.setTimer(order.getOrderNo(), orderId + "", 24 * 10 * 3600);
		return JMResult.create().code(JMResult.SUCCESS).desc("发货成功");
	}

	public JMResult updateOrderAddress(int addressId, String orderNo) {
		Order order = getByOrderNO(orderNo);
		if(order == null) {
			return JMResult.create().code(JMResult.FAIL).desc("该订单不存在，或者订单状态异常");
		}
		setOrderAddress(addressId, order);
		update(order);
		return JMResultUtil.success();
	}

	public Order selectByCanPayGoodsId(Integer goodsId) {
		return get("SELECT * FROM shop_order WHERE goodsId = " + goodsId + " AND state = 1", true);
	}

}
