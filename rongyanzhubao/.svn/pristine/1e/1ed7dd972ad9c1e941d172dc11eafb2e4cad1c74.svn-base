
package com.cn.jm._dao.room;

import java.util.List;

import com.cn._gen.dao.RoomMerchantDao;
import com.cn._gen.model.Account;
import com.cn._gen.model.AccountUser;
import com.cn._gen.model.RoomManagement;
import com.cn._gen.model.RoomMerchant;
import com.cn.jm.core.constants.JMConstants;
import com.cn.jm.util.SqlUtil;
import com.cn.jm.util.sqltool.JMCommonDao;
import com.cn.jm.util.sqltool.Query;
import com.jfinal.kit.HashKit;
import com.jfinal.plugin.activerecord.Page;


/**
 * Generated by 广州小跑robot.
 */
public class JMRoomMerchantDao extends RoomMerchantDao{
	
	private JMCommonDao commonDao = JMCommonDao.jmd;
	
	public Page<RoomMerchant> page(Integer pageNumber, Integer pageSize,Integer id,String keyword,String startTime,String endTime,boolean isCache){
		StringBuilder selectSql = new StringBuilder("SELECT id ");
		StringBuilder fromSql = new StringBuilder(" FROM ");
		fromSql.append(tableName);
		fromSql.append(" :WHERE ");
		SqlUtil.addWhere(fromSql," AND id = ",id);
		SqlUtil.addLike(fromSql," AND name","%",keyword,"%");
		SqlUtil.addBetweenTime(fromSql, startTime, endTime, " AND createTime");
		String strFromSql = fromSql.toString();
		String strSelectSql = selectSql.toString();
		return isCache?dao.paginateByCache(cacheName,HashKit.md5(selectSql.append(strFromSql).toString()), pageNumber, pageSize,false,strSelectSql, strFromSql)
			:dao.paginate(pageNumber, pageSize, false, strSelectSql,strFromSql);
	}
	
	public boolean check(Integer roomId) {
		Query query = new Query();
		query.put("and roomId = ", roomId);
		query.put("and state = ", JMConstants.NORMAL);
		return commonDao.selectOne(RoomManagement.class, query)!=null;
	}
	
	//主播是否绑定商家
	public boolean checkIsBind(Integer anchorAccountId) {
		Query query = new Query();
		query.put("and anchorAccountId =", anchorAccountId);
		query.put("and state = ", JMConstants.NORMAL);
		String select = "select *";
		return commonDao.selectOne(RoomMerchant.class, query, select)!=null;
	}
	
	public RoomMerchant selectRoomMerchant(Integer anchorAccountId) {
		Query query = new Query();
		query.put("and anchorAccountId =", anchorAccountId);
		query.put("and state = ", JMConstants.NORMAL);
		String select = "select *";
		return commonDao.selectOne(RoomMerchant.class, query, select);
	}
	
	//商家是否绑定主播
	public boolean checkIsBindAnchor(Integer accountId) {
		Query query = new Query();
		query.put("and accountId =", accountId);
		query.put("and state = ", JMConstants.NORMAL);
		String select = "select *";
		return commonDao.selectOne(RoomMerchant.class, query, select)!=null;
	}
	
	//查询我的管理员
	public List<AccountUser> selectMyManage(Integer merchantAccountId){
		Query query = new Query();
		String select = "select au.*";
		String inner = " au inner join webcast_room_management rm on rm.manageAccountId=au.accountId";
		query.put("and rm.merchantAccountId=", merchantAccountId);
		return commonDao.selectList(AccountUser.class, query, select ,inner);
	}
	
	//查询我的主播
	public List<AccountUser> selectMyAnchor(Integer merchantAccountId){
		Query query = new Query();
		String select = "select au.*";
		String inner = " au inner join webcast_room_merchant rm on rm.anchorAccountId=au.accountId";
		query.put("and rm.merchantAccountId=", merchantAccountId);
		return commonDao.selectList(AccountUser.class, query, select ,inner);
	}
	
	//查询我关联的房管
	public RoomManagement selectManageByMerchantId(Integer merchantId) {
		String sql = "select * from webcast_room_management where merchantAccountId = ?";
		return RoomManagement.dao.findFirst(sql,merchantId);
	}
	
	/**
	 * 根据房管id查找关联
	 */
	public RoomManagement selectRoomManage(Integer manageId) {
		String sql = "select * from webcast_room_management where manageAccountId = ?";
		return RoomManagement.dao.findFirst(sql,manageId);
	}
	
	
	//查询我关联的主播
	public RoomMerchant selectMerchantByMerchantId(Integer merchantId) {
		String sql = "select * from webcast_room_merchant where merchantAccountId = ?";
		return RoomMerchant.dao.findFirst(sql,merchantId);
	}
}
