
package com.cn.jm._dao.goods;

import java.util.HashMap;

import com.cn._gen.dao.GoodsResaleDao;
import com.cn._gen.model.GoodsResale;
import com.cn.jm.util.SqlUtil;
import com.jfinal.kit.HashKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;


/**
 * Generated by 广州小跑robot.
 */
public class JMGoodsResaleDao extends GoodsResaleDao{
	
	public Page<GoodsResale> page(Integer pageNumber, Integer pageSize,Integer id,String keyword,String startTime,String endTime,boolean isCache){
		StringBuilder selectSql = new StringBuilder("SELECT id ");
		StringBuilder fromSql = new StringBuilder(" FROM ");
		fromSql.append(tableName);
		fromSql.append(" :WHERE ");
		SqlUtil.addWhere(fromSql," AND id = ",id);
		SqlUtil.addLike(fromSql," AND name","%",keyword,"%");
		SqlUtil.addBetweenTime(fromSql, startTime, endTime, " AND createTime");
		SqlUtil.changeWhere(fromSql);
		String strFromSql = SqlUtil.getSql(fromSql);
		String strSelectSql = selectSql.toString();
		return isCache?dao.paginateByCache(cacheName,HashKit.md5(selectSql.append(strFromSql).toString()), pageNumber, pageSize,false,strSelectSql, strFromSql)
			:dao.paginate(pageNumber, pageSize, false, strSelectSql,strFromSql);
	}

	public GoodsResale get(Integer accountId, Integer goodsId) {
		return dao.findFirst("SELECT * FROM shop_goods_resale WHERE goodsId = " + goodsId + " AND accountId = " + accountId);
	}

	/**
	 * 根据用户id和商品id返回删除的数量
	 * @param accountId
	 * @param goodsId
	 * @return 
	 */
	public int delete(Integer accountId, Integer goodsId) {
		return Db.update("DELETE FROM shop_goods_resale WHERE goodsId = " + goodsId + " AND accountId = " + accountId);
	}

	/** (0新品, 1在售宝贝, 2已售欣赏) */
	static HashMap<Integer,String> sqlMap = new HashMap<>(2);
	static {
		sqlMap.put(1, " AND sg.stock != 0");
		sqlMap.put(2, " AND sg.stock = 0");
	}
	/**
	 * @param pageNumber 页数
	 * @param pageSize 页大小
	 * @param accountId 用户id
	 * @param keyword 搜索关键字(其实就是商品名称)
	 * @param type 搜索类型(0新品, 1在售宝贝, 2已售欣赏)
	 * @return
	 */
	public Page<GoodsResale> pageResaleGoods(Integer pageNumber, Integer pageSize, Integer accountId, String keyword, Integer type, String state) {
		StringBuilder fromSql = new StringBuilder();
		fromSql.append(" FROM shop_goods_resale sgr ");
		fromSql.append(" INNER JOIN shop_goods sg ON sgr.goodsId = sg.id");
		fromSql.append(" WHERE sgr.accountId = ").append(accountId);
		fromSql.append(" AND sg.type = 0 ");
		fromSql.append(state);
		SqlUtil.addSql(fromSql, sqlMap.get(type));
		SqlUtil.addLike(fromSql, " sg.name", "%", keyword, "%");
		fromSql.append(" ORDER BY sg.createTime DESC");
		return dao.paginate(pageNumber, pageSize, "SELECT sg.id,sg.name,sg.price,sg.resalePrice,sg.thumbnail,sg.video,sgr.id goodsResaleId,IFNULL(sgr.imageState,0) imageState", fromSql.toString());
	}
	
	/**
	 * @param pageNumber 页数
	 * @param pageSize 页大小
	 * @param accountId 用户id
	 * @param keyword 搜索关键字(其实就是商品名称)
	 * @param type 搜索类型(0新品, 1在售宝贝, 2已售欣赏)
	 * @param sellState 出售状态0已出售1未出售
	 * @param labelId 二级分类id
	 * @param maxprice 最大金额
	 * @param minprice 最小金额
	 * @return
	 */
	public Page<GoodsResale> pageHtmlGoods(Integer pageNumber, Integer pageSize, Integer accountId, String keyword, Integer type,
			String minprice, String maxprice, Integer labelId, Integer sellState) {
		StringBuilder fromSql = new StringBuilder();
		fromSql.append(" FROM shop_goods sg ")
			.append(" LEFT JOIN shop_goods_resale sgr ON sgr.goodsId = sg.id")
			.append(" WHERE ")
			.append(" (sgr.accountId = ").append(accountId).append(" OR sg.userId = ").append(accountId).append(" )")
			.append(" AND sg.type = ").append(GoodsEnum.SHOP_GOODS_TYPE)
			.append(" AND sg.state != ").append(GoodsEnum.DELETE_STATE);
		SqlUtil.addSql(fromSql, sqlMap.get(type));
		SqlUtil.addLike(fromSql, " AND sg.name", "%", keyword, "%");
		SqlUtil.addWhere(fromSql, " AND sg.sellState =", sellState);
		SqlUtil.addWhere(fromSql, " AND sg.labelId =", labelId);
		SqlUtil.addSql(fromSql, " AND (CASE WHEN sgr.id IS NULL THEN sg.price ELSE sg.resalePrice END) < ", maxprice);
		SqlUtil.addSql(fromSql, " AND (CASE WHEN sgr.id IS NULL THEN sg.price ELSE sg.resalePrice END) > ", minprice);
		fromSql.append(" ORDER BY sg.createTime DESC");
		return dao.paginate(pageNumber, pageSize,
				"SELECT sg.id,sg.name,(IFNULL(CASE WHEN sgr.id IS NULL THEN sg.price ELSE sg.resalePrice END,0)) price,sg.resalePrice,sg.thumbnail,sg.video,sg.sellState,sg.createTime,sgr.id goodsResaleId,sgr.imageState imageState",
				fromSql.toString());
	}

	public GoodsResale getByAccountIdAndGoodsId(int accountId, int goodsId) {
		return dao.findFirst("SELECT * FROM shop_goods_resale WHERE goodsId " + goodsId + " AND accountId = " + accountId);
	}
	
}
