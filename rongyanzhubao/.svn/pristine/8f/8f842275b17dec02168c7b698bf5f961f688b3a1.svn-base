
package com.cn.jm._dao.img;

import java.util.ArrayList;
import java.util.List;

import com.cn._gen.dao.ImgDao;
import com.cn._gen.model.Img;
import com.cn.jm.util.SqlUtil;
import com.jfinal.kit.HashKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by 广州小跑robot.
 */
public class JMImgDao extends ImgDao {

	public Page<Img> page(Integer pageNumber, Integer pageSize, Integer id, String keyword, String startTime,
			String endTime, ImgEnum type, boolean isCache) {
		StringBuilder selectSql = new StringBuilder("SELECT id,name,createTime ");
		StringBuilder fromSql = new StringBuilder(" FROM ");
		fromSql.append(tableName);
		fromSql.append(" :WHERE ");
		SqlUtil.addWhere(fromSql, " AND id = ", id);
		SqlUtil.addLike(fromSql, " AND name", "%", keyword, "%");
		SqlUtil.addBetweenTime(fromSql, startTime, endTime, " AND createTime");
		SqlUtil.addWhere(fromSql, " AND type =", type.getCode());
		SqlUtil.changeWhere(fromSql);
		String strFromSql = fromSql.toString();
		String strSelectSql = selectSql.toString();
		return isCache
				? dao.paginateByCache(cacheName, HashKit.md5(selectSql.append(strFromSql).toString()), pageNumber,
						pageSize, false, strSelectSql, strFromSql)
				: dao.paginate(pageNumber, pageSize, false, strSelectSql, strFromSql);
	}

	/**
	 * 对商品进行新增关联图片 不校验图片集合的大小 调用该接口需要对传入集合进行大小判断
	 * 传入的detailImageList和goodsImageList的大小总和至少为1
	 * 
	 * @param goodsId
	 *            商品id
	 * @param detailImageList
	 * @param goodsImageList
	 * @param formatDate
	 * @return
	 */
	public int inserGoodsImages(Integer goodsId, List<String> detailImageList, List<String> goodsImageList,
			String formatDate) throws Exception {
		final char leftBrackets = '(';
		final char rightBrackets = ')';
		final char symbol = '\'';
		final char comma = ',';
		StringBuilder insertSql = new StringBuilder();
		insertSql.append("INSERT INTO `tb_img` (`image`, `type`, `ids`, `createTime`) VALUES ");
		// 该方法拼接完的输出为 ('image','type','id','yyyy-MM-dd hh:mm:ss'),
		for (String detailImage : detailImageList) {
			insertSql.append(leftBrackets).append(symbol).append(detailImage).append(symbol).append(comma)
					.append(symbol).append(ImgEnum.GOODS_DETAILS_TYPE).append(symbol).append(comma).append(symbol)
					.append(goodsId).append(symbol).append(comma).append(symbol).append(formatDate).append(symbol)
					.append(rightBrackets).append(comma);
		}
		for (String goodsImage : goodsImageList) {
			insertSql.append(leftBrackets).append(symbol).append(goodsImage).append(symbol).append(comma).append(symbol)
					.append(ImgEnum.GOODS_OWNER_TYPE).append(symbol).append(comma).append(symbol).append(goodsId)
					.append(symbol).append(comma).append(symbol).append(formatDate).append(symbol).append(rightBrackets)
					.append(comma);
		}
		return Db.update(insertSql.substring(0, insertSql.length() - 1));
	}

	/**
	 * 对转售商品进行新增关联图片 不校验图片集合的大小 调用该接口需要对传入集合进行大小判断
	 * 传入的detailImageList和goodsImageList的大小总和至少为1
	 * 
	 * @param goodsId
	 *            商品id
	 * @param detailImageList
	 * @param goodsImageList
	 * @param formatDate
	 * @return
	 */
	public int inserGoodsImages(Integer ids, ArrayList<String> imgList, String formatDate, ImgEnum imageType)
			throws Exception {
		final char leftBrackets = '(';
		final char rightBrackets = ')';
		final char symbol = '\'';
		final char comma = ',';
		StringBuilder insertSql = new StringBuilder();
		insertSql.append("INSERT INTO `tb_img` (`image`, `type`, `ids`, `createTime`) VALUES ");
		// 该方法拼接完的输出为 ('image','type','id','yyyy-MM-dd hh:mm:ss'),
		for (String image : imgList) {
			insertSql.append(leftBrackets).append(symbol).append(image).append(symbol).append(comma).append(symbol)
					.append(imageType).append(symbol).append(comma).append(symbol).append(ids).append(symbol)
					.append(comma).append(symbol).append(formatDate).append(symbol).append(rightBrackets).append(comma);
		}
		return Db.update(insertSql.substring(0, insertSql.length() - 1));
	}

	public List<Img> selectByTypeAndIds(Integer ids, ImgEnum imgType) {
		StringBuilder selectSql = new StringBuilder("SELECT * FROM `tb_img` WHERE ");
		selectSql.append(" ids = ").append(ids);
		selectSql.append(" AND type = ").append(imgType.getCode());
		return dao.find(selectSql.toString());
	}

	/**
	 * @param ids
	 *            关联的表id
	 * @param imgType
	 *            图片关联类型
	 * @param notInIds
	 *            要删除不包含在id里的数据
	 * @return
	 */
	public int deleteNotInByIdsAndType(int ids, ImgEnum imgType, String[] notInIds) {
		StringBuilder deleteSql = new StringBuilder();
		deleteSql.append("DELETE FROM tb_img WHERE ");
		deleteSql.append(" ids =").append(ids);
		deleteSql.append(" AND `type` = ").append(imgType);
		SqlUtil.putNotIn(deleteSql, " AND id ", notInIds);
		return Db.update(deleteSql.toString());
	}

	public Integer countImageNum(Integer ids, ImgEnum imgType) {
		StringBuilder querySql = new StringBuilder();
		querySql.append("SELECT IFNULL(COUNT(*),0) FROM tb_img WHERE ");
		querySql.append(" ids =").append(ids);
		querySql.append(" AND `type` = ").append(imgType);
		return Db.queryInt(querySql.toString());
	}

	public int insertImages(Integer goodsId, ArrayList<String> imageList, String formatDate, int type) {
		final char leftBrackets = '(';
		final char rightBrackets = ')';
		final char symbol = '\'';
		final char comma = ',';
		StringBuilder insertSql = new StringBuilder();
		insertSql.append("INSERT INTO `tb_img` (`image`, `type`, `ids`, `createTime`) VALUES ");
		// 该方法拼接完的输出为 ('image','type','id','yyyy-MM-dd hh:mm:ss'),
		for (String image : imageList) {
			insertSql.append(leftBrackets).append(symbol).append(image).append(symbol).append(comma)
					.append(symbol).append(type).append(symbol).append(comma).append(symbol)
					.append(goodsId).append(symbol).append(comma).append(symbol).append(formatDate).append(symbol)
					.append(rightBrackets).append(comma);
		}
		return Db.update(insertSql.substring(0, insertSql.length() - 1));
	}

}
