
package com.cn.jm.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.cn._gen.model.Goods;
import com.cn._gen.model.GoodsResale;
import com.cn.jm._dao.goods.GoodsEnum;
import com.cn.jm._dao.goods.GoodsResaleEnum;
import com.cn.jm._dao.goods.JMGoodsDao;
import com.cn.jm._dao.goods.JMGoodsResaleDao;
import com.cn.jm._dao.img.ImgEnum;
import com.cn.jm.core.utils.util.JMResult;
import com.cn.jm.information.PromptInformationEnum;
import com.cn.jm.util.JMResultUtil;
import com.jfinal.aop.Inject;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
/**
 * Generated by 小跑科技robot  .
 */
public class JMGoodsResaleService extends BasicsService<GoodsResale> {
	
	@Inject
	JMGoodsResaleDao goodsResaleDao;
	@Inject
	JMGoodsService goodsService;
	@Inject
	JMImgService imgService;
	@Inject
	JMGoodsDao goodsDao;
	
	public Page<GoodsResale> page(Integer pageNumber, Integer pageSize,Integer id,String keyword,String startTime,String endTime){
		return goodsResaleDao.page(pageNumber,pageSize,id,keyword,startTime,endTime,false);
	}

	public JMResult resaleGoods(Integer accountId, Integer goodsId, String describe) {
		Goods goods = goodsService.selectById(goodsId);
		if(goods == null || GoodsEnum.LOWER_SHELF_STATE.identical(goods.getState())) {
			return JMResultUtil.fail(PromptInformationEnum.GOODS_NOT_EXISTENCE);
		}
		GoodsResale goodsResale = goodsResaleDao.get(accountId, goodsId);
		if(goodsResale == null) {
			goodsResale = new GoodsResale();
			goodsResale.setAccountId(accountId);
			goodsResale.setGoodsId(goodsId);
			goodsResale.setDescribe(describe);
			save(goodsResale);
			//对商品转售数加1
			goodsDao.addResaleNum(goodsId);
		}
		return JMResultUtil.success();
	}

	public JMResult deleteResaleGoods(Integer accountId, Integer goodsId) {
		goodsResaleDao.delete(accountId, goodsId);
		goodsDao.subtractResaleNum(goodsId);
		return JMResultUtil.success();
	}

	/**
	 * 获取我的转售商品
	 * @param pageNumber 页数
	 * @param pageSize 页大小
	 * @param accountId 用户id
	 * @param keyword 搜索关键字(其实就是商品名称)
	 * @param type 搜索类型(0新品, 1在售宝贝, 2已售欣赏)
	 * @return
	 */
	public Page<GoodsResale> pageResaleGoods(Integer pageNumber, Integer pageSize, Integer accountId, String keyword, Integer type) {
		return goodsResaleDao.pageResaleGoods(pageNumber, pageSize, accountId, keyword, type, "AND sg.state = 0");
	}
	
	/**
	 * 获取h5的转售商品
	 * @param pageNumber 页数
	 * @param pageSize 页大小
	 * @param accountId 用户id
	 * @param keyword 搜索关键字(其实就是商品名称)
	 * @param type 搜索类型(1在售宝贝, 2已售欣赏)
	 * @param sellState 出售状态0已出售1未出售
	 * @param labelId 二级分类id
	 * @param maxprice 最大金额
	 * @param minprice 最小金额
	 * @return
	 */
	public Page<GoodsResale> pageHtmlGoods(Integer pageNumber, Integer pageSize, Integer accountId, String keyword, Integer type, String minprice, String maxprice, Integer labelId, Integer sellState) {
		return goodsResaleDao.pageHtmlGoods(pageNumber, pageSize, accountId, keyword, type, minprice, maxprice,
				labelId, sellState);
	}
	
	/**
	 * @param pageNumber 页数
	 * @param pageSize 页大小
	 * @param accountId 用户id
	 * @param keyword 搜索关键字(其实就是商品名称)
	 * @param type 搜索类型(0新品, 1在售宝贝, 2已售欣赏)
	 * @return
	 */
	public Page<GoodsResale> pageMyResaleGoods(Integer pageNumber, Integer pageSize, Integer accountId, String keyword, Integer type) {
		return goodsResaleDao.pageResaleGoods(pageNumber, pageSize, accountId, keyword, type, "AND sg.state = 0 ");
	}

	public JMResult updateMyResaleGoods(int accountId, ArrayList<String> detailImageList, int goodsId, String describe, String[] notInIds) {
		GoodsResale goodsResale = goodsResaleDao.getByAccountIdAndGoodsId(accountId, goodsId);
		if(goodsResale == null) {
			return JMResultUtil.fail(PromptInformationEnum.NOT_DEIT_OTHERS_GOODS);
		}
		if(StrKit.notBlank(describe)) {
			goodsResale.setDescribe(describe);
		}
		try {
			Integer id = goodsResale.getId();
			int imageNum = imgService.countImageNum(id, ImgEnum.RESALE_GOODS__DETAILS_TYPE);
			int insertNum = detailImageList.size();
			int delteNum = imgService.deleteResaleGoodsImage(id, notInIds);
			imgService.inserImages(id, detailImageList, new ArrayList<>());
			//ImgEnum.RESALE_GOODS__DETAILS_TYPE
			if(imageNum - delteNum + insertNum == 0) {
				goodsResale.setImageState(GoodsResaleEnum.ORIGINAL_IMAGE.getValue());
			}else {
				goodsResale.setImageState(GoodsResaleEnum.NEWLY_ADDED.getValue());
			}
			goodsResaleDao.update(goodsResale);
			return JMResultUtil.success();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return JMResultUtil.fail();
	}

	/**
	 * 获取最近五天的商品
	 * @param accountId
	 * @return
	 */
	public HashMap<String, Object> htmlNewGoods(Integer accountId) {
		List<Goods> newGoodsList = goodsDao.htmlNewGoods(accountId);
		HashMap<String,Object> resultMap = getHashMap(newGoodsList);
		for (Goods goodsResale : newGoodsList) {
			List<Goods> list = getListByMap(resultMap,goodsResale);
			list.add(goodsResale);
		}
		return resultMap;
	}

	private static final String DAY_KEY = "day";
	private static final String FORMAT_TIME_KEY = "formatTime";
	private static final String VALUE_KEY = "value";
	/**
	 * 根据集合的第一个时间获取一个初始化后的hashMap
	 * @param newGoodsList
	 * @return
	 */
	private HashMap<String, Object> getHashMap(List<Goods> newGoodsList) {
		//只会存储区分五天的hashMap和一个记录天数的int值
		HashMap<String,Object> resultMap = new HashMap<>(6);
		if(newGoodsList == null || newGoodsList.size() == 0) {
			return resultMap;
		}
		//该map只会存在两个值,一个是String日期,一个是list集合,一个是让前端获取的遍历的固定名称
		HashMap<Object, Object> dayMap = new HashMap<>(3);
		String formatTime = newGoodsList.get(0).get(FORMAT_TIME_KEY);
		ArrayList<Goods> list = new ArrayList<Goods>();

		resultMap.put(DAY_KEY, 0);
		resultMap.put("day0", dayMap);
		dayMap.put(VALUE_KEY, list);
		dayMap.put(FORMAT_TIME_KEY, formatTime);
		dayMap.put(formatTime, list);
		return resultMap;
	}
	@SuppressWarnings("unchecked")
	private List<Goods> getListByMap(HashMap<String,Object> map, Goods goods){
		int dayNum = (int) map.get(DAY_KEY);
		HashMap<String,Object> dayMap = (HashMap<String,Object>) map.get(DAY_KEY + dayNum);
		String formatTime = goods.get(FORMAT_TIME_KEY);
		List<Goods> list = (List<Goods>) dayMap.get(formatTime);
		if(list == null) {
			list = new ArrayList<Goods>();
			map.put(DAY_KEY, ++dayNum);

			dayMap = new HashMap<>(3);
			map.put(DAY_KEY + dayNum, dayMap);

			dayMap.put(VALUE_KEY, list);
			dayMap.put(formatTime, list);
			dayMap.put(FORMAT_TIME_KEY, formatTime);
		}
		return list;
	}
	
}