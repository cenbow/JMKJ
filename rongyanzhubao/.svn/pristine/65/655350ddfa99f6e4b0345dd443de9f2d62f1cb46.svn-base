
package com.cn.jm._dao.goods;

import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.cn._gen.dao.GoodsStarDao;
import com.cn._gen.model.Goods;
import com.cn._gen.model.GoodsStar;
import com.cn._gen.model.Order;
import com.cn._gen.model.OrderGoods;
import com.cn.jm._dao.order.JMOrderDao;
import com.cn.jm._dao.order.JMOrderGoodsDao;
import com.cn.jm._dao.zan.ZanEnum;
import com.cn.jm.core.db.JMToolSql;
import com.cn.jm.core.tool.JMToolString;
import com.cn.jm.core.utils.util.JMResult;
import com.cn.jm.core.web.dao.JMBaseDao;
import com.cn.jm.service.JMAccountUserService;
import com.cn.jm.service.JMZanService;
import com.jfinal.aop.Inject;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;


/**
 * Generated by 广州小跑robot.
 * 获取评论列表
 */
public class JMGoodsStarDao extends GoodsStarDao{
//	@Inject
//	public JMAccountExpandDao expandDao ;
	@Inject
	public JMOrderGoodsDao orderGoodsDao ;
	@Inject
	public JMOrderDao orderDao ;
	@Inject
	JMGoodsDao goodsDao;
	@Inject
	JMAccountUserService accountUserService;
	@Inject
	JMZanService zanService;
	
	
	public Page<GoodsStar> pageByApi(int goodsId,int pageSize, Integer accountId,int pageNumber){
		HashMap<String, Object> param = new HashMap<>();
		param.put("goodsId",goodsId);
		Page<GoodsStar> page = page(pageNumber, pageSize, "*", param, "id", "DESC", true);
		for(GoodsStar goodsStar : page.getList()){
			goodsStar.put("isZan", accountId==null?false:zanService.isZan(goodsStar.getId(), accountId, ZanEnum.GOODS_STAR_TYPE));
			goodsStar.put("userInfo", accountUserService.selectOneByKeyAndValue("accountId =", goodsStar.getUserId()));
		}
		return page;
	}

	
	public List<GoodsStar> goodsStarByOrderId(int orderId, Integer accountId){
		GoodsStar goodsStar = dao.findFirst("SELECT sgs.* FROM shop_goods_star sgs INNER JOIN `shop_order_goods` sog ON sog.id = sgs.orderGoodsId INNER JOIN shop_order so ON so.id = sog.`orderId` WHERE so.id =" + orderId);
		goodsStar.put("thumbnail", goodsDao.getById(goodsStar.getGoodsId()).getThumbnail());
		goodsStar.put("isZan", accountId==null?false:zanService.isZan(goodsStar.getId(), accountId, ZanEnum.GOODS_STAR_TYPE));
		goodsStar.put("userInfo", accountUserService.selectOneByKeyAndValue("accountId =", goodsStar.getUserId()));
		return Arrays.asList(goodsStar);
	}
	public Page<GoodsStar> pageForSys(int goodsId,int pageSize,int pageNumber,String keyword,String startTime,String endTime){
		HashMap<String, Object> param = new HashMap<>();
		param.put("goodsId",goodsId);
		HashMap<String, Object> likepm = new HashMap<>();
		likepm.put("content",keyword);
		Page<GoodsStar> page = null;
		if (JMToolString.isNotEmpty(startTime) && JMToolString.isNotEmpty(endTime)) {
			page = page(pageNumber, pageSize, "", param,null, likepm, startTime,endTime,"id", JMBaseDao.DESC, false);
		}else {
			 page = page(pageNumber, pageSize, "*", param, null, likepm,  "id", "DESC",false);
		}
		for(GoodsStar goodsStar : page.getList()){
			goodsStar.put("userInfo", accountUserService.selectOneByKeyAndValue("accountId =", goodsStar.getUserId()));
		}
		return page;
	}
	
	public Page<GoodsStar> pageMy(int accountId,int pageSize,int pageNumber){
		HashMap<String, Object> param = new HashMap<>();
		param.put("userId",accountId);
		Page<GoodsStar> page = page(pageNumber, pageSize, "*", param, "id", "DESC",true);
		for(GoodsStar goodsStar : page.getList()){
			goodsStar.put("isZan", zanService.isZan(goodsStar.getId(), accountId, ZanEnum.GOODS_STAR_TYPE));
			goodsStar.put("userInfo", accountUserService.selectOneByKeyAndValue("accountId =", goodsStar.getUserId()));
		}
		return page;
	}

	
	public GoodsStar getByGoodsId(int goodsId, int accountId){
		return JMToolSql.get(cacheName,new GoodsStar(),"select a.*,b.nick,b.head,(CASE WHEN zan.id IS NULL THEN 'false' ELSE 'true' END) isZan from shop_goods_star a inner join tb_account_user b on a.userId = b.accountId LEFT JOIN tb_zan zan ON zan.ids = a.id AND zan.accountId = ? AND zan.`type` = 4 where goodsId = ? order by id desc", accountId, goodsId);
	}
	
	public GoodsStar getBySellerAccountId(int sellerAccountId){
		return JMToolSql.get(cacheName,new GoodsStar(),"select a.*,b.nick,b.head from shop_goods_star a inner join tb_account_user b on a.userId = b.accountId where sellerAccountId = ? order by id desc", sellerAccountId);
	}
	
	public GoodsStar selectByAccountId(int accountId){
		return JMToolSql.get(cacheName,new GoodsStar(),"select a.*,b.nick,b.head from shop_goods_star a inner join tb_account_user b on a.userId = b.accountId where userId = ? order by id desc", accountId);
	}
	
	/**
	 * 
	 * @date 2019年1月5日 下午6:09:13
	 * @author JaysonLee
	 * @Description: 增加评论
	 * @reqMethod post
	 * @paramter
	 * @pDescription	
	 * @param accountId
	 * @param orderGoodsId
	 * @param starNum
	 * @param content
	 * @param imgList
	 * @return
	 *
	 */
	public JMResult add(int accountId,int orderGoodsId,int starNum,String content,List<String> imgList){
		OrderGoods orderGoods = orderGoodsDao.getById(orderGoodsId);
		if(orderGoods == null){
			return JMResult.create().code(JMResult.FAIL).desc("该订单商品不存在");
		}
		HashMap<String, Object> param = new HashMap<>();
		param.put("id", orderGoods.getOrderId());
		param.put("state",8);//确认收货待评价
		Order order = orderDao.get(param,false);
		if(order == null){
			return JMResult.create().code(JMResult.FAIL).desc("该订单不存在或者订单状态异常");
		}
		Goods goods = goodsDao.getById(orderGoods.getGoodsId());
		GoodsStar goodsStar = new GoodsStar();
		goodsStar.setUserId(accountId);
		goodsStar.setStarNum(starNum);
		goodsStar.setGoodsId(orderGoods.getGoodsId());
		goodsStar.setOrderGoodsId(orderGoodsId);
		goodsStar.setSkuCode(orderGoods.getSkuCode());
//		goodsStar.setSkuId(orderGoods.getSkuId());
		goodsStar.setSkuImg(orderGoods.getSkuImg());
		goodsStar.setPrice(orderGoods.getPrice());
		goodsStar.setGoodsNum(orderGoods.getNum());
		goodsStar.setGoodsName(orderGoods.getGoodsName());
		goodsStar.setContent(content);
		goodsStar.setCreateTime(new Date());
		goodsStar.setSellerAccountId(goods.getUserId());
		for(int i = 0;i<imgList.size();i++){
			String img = imgList.get(i);
			if(img != null){
				goodsStar.set("img"+(i+1),img);
			}
		}
		save(goodsStar);
		return JMResult.create().code(JMResult.SUCCESS).desc("评论成功").data(goodsStar.getId());
	}
	
	
	public JMResult detail(int accountId,int id){
		HashMap<String, Object> param = new HashMap<>();
		param.put("id", id);
		param.put("userId",accountId);
		GoodsStar goodsStar = get(param,false);
		if(goodsStar == null){
			return JMResult.create().code(JMResult.FAIL).desc("该评论不存在");
		}
		goodsStar.put("isZan", zanService.isZan(id, accountId, ZanEnum.GOODS_STAR_TYPE));
		return JMResult.create().code(JMResult.SUCCESS).desc("获取成功").data(goodsStar);
	}

	public void updateZanNum(int zanNum, int id) {
		Db.update("UPDATE shop_goods_star SET zanNum = zanNum +(" + zanNum + ") WHERE id = " + id);
	}
	
}
