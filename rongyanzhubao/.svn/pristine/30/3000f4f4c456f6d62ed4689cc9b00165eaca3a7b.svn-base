
package com.cn.jm.controller.base.system;

import java.io.File;
import java.util.Date;
import java.util.HashMap;

import com.cn._gen.model.Notice;
import com.cn.jm._dao.notice.JMNoticeDao;
import com.cn.jm.core.JMConsts;
import com.cn.jm.web.core.router.JMRouterMapping;
import com.cn.jm.core.tool.JMToolString;
import com.cn.jm.core.utils.util.JMResult;
import com.cn.jm.core.utils.util.JMUploadKit;
import com.cn.jm.core.web.controller.JMBaseSystemController;
import com.cn.jm.core.web.dao.JMBaseDao;
import com.cn.jm.interceptor.SystemLoginInterceptor;
import com.jfinal.aop.Before;
import com.jfinal.aop.Inject;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by 广州小跑robot.
 */
@JMRouterMapping(url = SystemNoticeController.url)
public class SystemNoticeController extends JMBaseSystemController {

	public static final String path = JMConsts.base_view_url + "/system/base/notice";
	public static final String url = "/system/notice";

	@Inject
	public JMNoticeDao noticeDao;

	
	public void index() {
		page();
	}

	
	public void page() {
		String keyword = getPara("keyword", "");
		Integer id = getParaToInt("id");

		String startTime = getPara("startTime", "");
		String endTime = getPara("endTime", "");

		Integer pageNumber = getParaToInt(0, 1);
		Integer pageSize = JMConsts.pageSize;

		HashMap<String, Object> andpm = new HashMap<String, Object>();
		HashMap<String, Object> likepm = new HashMap<String, Object>();
		HashMap<String, Object> orpm = new HashMap<String, Object>();

		if (id == null) {
			if (JMToolString.isNotEmpty(keyword)) {
				likepm.put("title", keyword);
			}
		} else {
			andpm.put("id", id);
		}
		andpm.put("type", JMNoticeDao.TYPE_SYSTEM);
		Page<Notice> page = null;

		if (JMToolString.isNotEmpty(startTime) && JMToolString.isNotEmpty(endTime)) {
			page = noticeDao.page(pageNumber, pageSize, "", andpm, orpm, likepm, startTime, endTime, "id",
					JMBaseDao.DESC, true);
		} else {
			page = noticeDao.page(pageNumber, pageSize, "", andpm, orpm, likepm, "id", JMBaseDao.DESC, true);
		}

		setAttr("id", id);
		setAttr("keyword", keyword);
		setAttr("startTime", startTime);
		setAttr("endTime", endTime);

		setAttr("page", page);
		jump();
		render(path + "/page.html");
	}

	
	public void add() {
		setToken();

		setAttr("action", JMConsts.ACTION_ADD);
		setAttr("notice", new Notice());
		render(path + "/add.html");
	}

	@Before(value = { SystemLoginInterceptor.class })
	public void save() {
		if (isRepeatSubmit()) {
			JMResult.fail(this, "不允许重复提交");
			return;
		}

		Notice notice = getModel(Notice.class);
		notice.setCreateTime(new Date());
		if (noticeDao.saveNotice(notice)) {
//			try {
//				// 由于库对应的用户不同,所以现在暂时调用另外一个项目的接口
//				String url = "http://www.xwsgx.com/scMall/api/notice/saveNotice?id=" + notice.getId();
//				System.out.println("com.cn.jm.base.dao.tb.notice.SystemNoticeController.save() 暂时性的发送同步信息:" + url
//						+ HttpKit.get(url));
//				// System.out.println("暂时性的发送同步信息" +
//				// HttpKit.get("http://127.0.0.1/scMall/api/notice/saveNotice?id="+noticeId));
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
			JMResult.success(this,notice.getId(), "创建成功");
		} else {
			JMResult.fail(this, "创建失败");
		}
	}

	
//	public void edit() {
//		setToken();
//		int id = getParaToInt("id");
//		Notice notice = noticeDao.getById(id);
//		setAttr("sendStateName", JMNoticeService.SERVICE.getSendStateName(notice.getSendState()));
//		setAttr("notice", notice);
//		render(path + "/edit.html");
//	}

	@Before(value = { SystemLoginInterceptor.class })
	public void update() {
		if (isRepeatSubmit()) {
			JMResult.fail(this, "不允许重复提交");
			return;
		}

		Notice notice = getModel(Notice.class);
		if (noticeDao.update(notice)) {
//			try {
//				String url = "http://www.xwsgx.com/scMall/api/notice/updateNotice?id=" + notice.getId();
//				System.out.println("com.cn.jm.base.dao.tb.notice.SystemNoticeController.update() 暂时性的发送同步信息:" + url
//						+ HttpKit.get(url));
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
			JMResult.success(this,notice.getId(), "修改成功");
		} else {
			JMResult.fail(this, "修改失败");
		}
	}

	@Before(value = { SystemLoginInterceptor.class })
	public void upload() {
		File file = JMUploadKit.uploadAvatar(this, "file");
		HashMap<String, Object> data = new HashMap<>();
		data.put("name", file.getName());
		data.put("file", JMUploadKit.uploadPath + "file/" + file.getName());
		data.put("localFile", file.getAbsolutePath());
		JMResult.success(this, data, "上传成功");
	}

	@Before(value = { SystemLoginInterceptor.class })
	public void delete() {
		int id = getParaToInt("id");

		if (noticeDao.deleteById(id)) {
			JMResult.success(this, "删除成功");
		} else {
			JMResult.fail(this, "删除失败");
		}
	}

	@Before(value = { SystemLoginInterceptor.class })
	public void dels() {
		Integer[] ids = getParaValuesToInt("ids");
		if (ids != null) {
			boolean result = noticeDao.deleteByIds(ids);
			if (result) {
				JMResult.success(this, "删除成功");
			} else {
				JMResult.fail(this, "删除失败");
			}
		} else {
			JMResult.fail(this, "请选择需要删除的数据");
		}
	}

}